package moudles;

import android.content.Context;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.Parcelable;
import android.os.RemoteException;
import android.security.keystore.KeyInfo;
import android.support.annotation.NonNull;
import android.util.Log;

import com.dreamtek.smartpos.deviceservice.constdefine.CTLSKernelID;
import com.verifone.smartpos.utils.BCDDecode;
import com.verifone.smartpos.utils.StringUtil;
import com.verifone.smartpos.utils.TlvUtil;
import com.dreamtek.smartpos.deviceservice.aidl.BLKData;
import com.dreamtek.smartpos.deviceservice.aidl.CheckCardListener;
import com.dreamtek.smartpos.deviceservice.aidl.DRLData;
import com.dreamtek.smartpos.deviceservice.aidl.EMVHandler;
import com.dreamtek.smartpos.deviceservice.aidl.IBeeper;
import com.dreamtek.smartpos.deviceservice.aidl.IEMV;
import com.dreamtek.smartpos.deviceservice.aidl.ILed;
import com.dreamtek.smartpos.deviceservice.aidl.IPinpad;
import com.dreamtek.smartpos.deviceservice.aidl.IRFCardReader;
import com.dreamtek.smartpos.deviceservice.aidl.IssuerUpdateHandler;
import com.dreamtek.smartpos.deviceservice.aidl.OnlineResultHandler;
import com.dreamtek.smartpos.deviceservice.aidl.PinInputListener;
import com.dreamtek.smartpos.deviceservice.aidl.RequestACTypeHandler;
import com.dreamtek.smartpos.deviceservice.aidl.key_manager.IKLD;

import java.io.File;
import java.io.PrintWriter;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import Utils.LogUtils;
import base.MyApplication;

import static android.content.ContentValues.TAG;
//import static cn.verifone.atoolsjar.utils.Utils.asc2Bcd;
//import static cn.verifone.atoolsjar.utils.Utils.byte2HexStr;

public class EmvMoudle {
    Context context;
    IEMV iemv;
    ILed iledDriver;
    IBeeper iBeeper;
    LogUtils logUtils;
    IKLD ikld;
    IRFCardReader irfCardReader;
    ArrayList<String> apiList = new ArrayList<String>();
    ArrayList<ArrayList<String>> caseNames = new ArrayList<ArrayList<String>>();
    ArrayList<String> checkCard = new ArrayList<String>();
    ArrayList<String> stopCheckCard = new ArrayList<String>();
    ArrayList<String> updateAID = new ArrayList<String>();
    ArrayList<String> updateRID = new ArrayList<String>();
    ArrayList<String> getAID = new ArrayList<String>();
    ArrayList<String> getRID = new ArrayList<String>();
    ArrayList<String> importAmount = new ArrayList<String>();
    ArrayList<String> importAppSelection = new ArrayList<String>();
    ArrayList<String> importPin = new ArrayList<String>();
    ArrayList<String> importCertConfirmResult = new ArrayList<String>();
    ArrayList<String> importCardConfirmResult = new ArrayList<String>();
    ArrayList<String> importOnlineResult = new ArrayList<String>();
    ArrayList<String> startEMV = new ArrayList<String>();
    ArrayList<String> abortEMV = new ArrayList<String>();
    ArrayList<String> getCardData = new ArrayList<String>();
    ArrayList<String> setEMVData = new ArrayList<String>();
    ArrayList<String> getAppTLVList = new ArrayList<String>();
    ArrayList<String> getEMVData = new ArrayList<String>();
    ArrayList<String> getProcessCardType = new ArrayList<String>();
    ArrayList<String> registerKernelAID = new ArrayList<String>();
    ArrayList<String> updateVisaAPID = new ArrayList<String>();
    ArrayList<String> updateCardBlk = new ArrayList<String>();
    ArrayList<String> emvProcessingRequestOnline = new ArrayList<String>();
    ArrayList<String> getCAPK = new ArrayList<String>();
    ArrayList<String> enableTrack = new ArrayList<String>();
    ArrayList<String> checkCardMs = new ArrayList<String>();
    ArrayList<String> turnOn = new ArrayList<String>();
    ArrayList<String> turnOff = new ArrayList<String>();
    ArrayList<String> startBeep = new ArrayList<String>();
    ArrayList<String> getCtlsSpecVer = new ArrayList<String>();
    ArrayList<String> byPassPin = new ArrayList<String>();
    ArrayList<String> setAcType = new ArrayList<String>();
    ArrayList<String> setIssuerUpdate = new ArrayList<String>();
    ArrayList<String> updateGroupParam = new ArrayList<>();
    ArrayList<String> setFinalAppSelectCallBack = new ArrayList<>();
    ArrayList<String> getAllKeysInfo = new ArrayList<>();
    ArrayList<String> isWarrantyKeyExists = new ArrayList<>();

    public EmvMoudle(Context context, IEMV iemv, ILed iledDriver, IKLD ikld, IRFCardReader irfCardReader) {
        this.context = context;
        logUtils = MyApplication.serviceMoudle.logUtils;
        this.iemv = iemv;
        this.iledDriver = iledDriver;
        this.iBeeper = iBeeper;
        this.irfCardReader = irfCardReader;
        this.ikld = ikld;
        addAllapi();
    }


    private void addAllapi() {
        try {
            Class aClass = Class.forName("moudles.EmvMoudle");
            Method[] methods = aClass.getDeclaredMethods();
            for (Method i : methods) {
                if (i.getName().startsWith("My")) {
                    apiList.add(i.getName().replace("My", ""));
                } else {
                    switch (i.getName().substring(0, 3)) {
                        case "M01":
                            checkCard.add(i.getName());
                            break;
                        case "M02":
                            stopCheckCard.add(i.getName());
                            break;
                        case "M03":
                            updateAID.add(i.getName());
                            break;
                        case "M04":
                            updateRID.add(i.getName());
                            break;
                        case "M05":
                            getAID.add(i.getName());
                            break;
                        case "M06":
                            getRID.add(i.getName());
                            break;
                        case "M07":
                            importAmount.add(i.getName());
                            break;
                        case "M08":
                            importAppSelection.add(i.getName());
                            break;
                        case "M09":
                            importPin.add(i.getName());
                            break;
                        case "M10":
                            importCertConfirmResult.add(i.getName());
                            break;
                        case "M11":
                            importCardConfirmResult.add(i.getName());
                            break;
                        case "M12":
                            importOnlineResult.add(i.getName());
                            break;
                        case "M13":
                            startEMV.add(i.getName());
                            break;
                        case "M14":
                            abortEMV.add(i.getName());
                            break;
                        case "M15":
                            getCardData.add(i.getName());
                            break;
                        case "M16":
                            setEMVData.add(i.getName());
                            break;
                        case "M17":
                            getAppTLVList.add(i.getName());
                            break;
                        case "M18":
                            getEMVData.add(i.getName());
                            break;
                        case "M19":
                            getProcessCardType.add(i.getName());
                            break;
                        case "M20":
                            registerKernelAID.add(i.getName());
                            break;
                        case "M21":
                            updateVisaAPID.add(i.getName());
                            break;
                        case "M22":
                            updateCardBlk.add(i.getName());
                            break;
                        case "M23":
                            emvProcessingRequestOnline.add(i.getName());
                            break;
                        case "M24":
                            getCAPK.add(i.getName());
                            break;
                        case "M25":
                            enableTrack.add(i.getName());
                            break;
                        case "M26":
                            checkCardMs.add(i.getName());
                            break;
                        case "M27":
                            turnOn.add(i.getName());
                            break;
                        case "M28":
                            turnOff.add(i.getName());
                            break;
                        case "M29":
                            startBeep.add(i.getName());
                            break;
                        case "M30":
                            getCtlsSpecVer.add(i.getName());
                            break;
                        case "M31":
                            byPassPin.add(i.getName());
                            break;
                        case "M32":
                            setAcType.add(i.getName());
                            break;
                        case "M33":
                            setIssuerUpdate.add(i.getName());
                            break;
                        case "M34":
                            updateGroupParam.add(i.getName());
                            break;
                        case "M35":
                            setFinalAppSelectCallBack.add(i.getName());
                            break;
                        case "M36":
                            getAllKeysInfo.add(i.getName());
                            break;
                        case "M37":
                            isWarrantyKeyExists.add(i.getName());
                            break;
                    }
                }
            }
            caseNames.add(checkCard);
            caseNames.add(stopCheckCard);
            caseNames.add(updateAID);
            caseNames.add(updateRID);
            caseNames.add(getAID);
            caseNames.add(getRID);
            caseNames.add(importAmount);
            caseNames.add(importAppSelection);
            caseNames.add(importPin);
            caseNames.add(importCertConfirmResult);
            caseNames.add(importCardConfirmResult);
            caseNames.add(importOnlineResult);
            caseNames.add(startEMV);
            caseNames.add(abortEMV);
            caseNames.add(getCardData);
            caseNames.add(setEMVData);
            caseNames.add(getAppTLVList);
            caseNames.add(getEMVData);
            caseNames.add(getProcessCardType);
            caseNames.add(registerKernelAID);
            caseNames.add(updateVisaAPID);
            caseNames.add(updateCardBlk);
            caseNames.add(emvProcessingRequestOnline);
            caseNames.add(getCAPK);
            caseNames.add(enableTrack);
            caseNames.add(checkCardMs);
            caseNames.add(turnOn);
            caseNames.add(turnOff);
            caseNames.add(startBeep);
            caseNames.add(getCtlsSpecVer);
            caseNames.add(byPassPin);
            caseNames.add(setAcType);
            caseNames.add(setIssuerUpdate);
            caseNames.add(updateGroupParam);
            caseNames.add(setFinalAppSelectCallBack);
            caseNames.add(getAllKeysInfo);
            caseNames.add(isWarrantyKeyExists);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            logUtils.addCaseLog(msg.getData().getString("message"));
            logUtils.showCaseLog();
        }
    };

    private static final String BUNDLE_EMV_PAN = "PAN";
    private static final String BUNDLE_EMV_TRACK1 = "TRACK1";
    private static final String BUNDLE_EMV_TRACK2 = "TRACK2";
    private static final String BUNDLE_EMV_TRACK3 = "TRACK3";
    private static final String BUNDLE_EMV_SERVICE_CODE = "SERVICE_CODE";
    private static final String BUNDLE_EMV_EXPIRED_DATE = "EXPIRED_DATE";

//    String VISA_ctls_AID = "9F0607A00000000310109F0902008CDF010100DF1105D84000A800DF1205D84004F800DF130508100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000DF1906000000100000DF2006000000100000DF2106000000000100";
//    String VISA_AID = "9F0607A00000000310109F0902008CDF010100DF1105D84000A800DF1205D84004F800DF130508100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000";
//    String MASTER_ctls_AID = "9F0607A00000000410109F09020200DF010100DF1105FC50A8A000DF1205F850A8F800DF130504000000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000DF1906000000100000DF2006000000100000DF2106000000000100";
//    String MASTER_AID = "9F0607A00000000410109F09020200DF010100DF1105FC50A8A000DF1205F850A8F800DF130504000000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B060000001000009F15021234";
//    String JCB_ctls_AID = "9F0607A00000006510109F09020200DF010100DF1105FC60242800DF1205FC60ACF800DF130500100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000DF1906000000100000DF2006000000100000DF2106000000000100";
//    String JCB_AID = "9F0607A00000006510109F09020200DF010100DF1105FC60242800DF1205FC60ACF800DF130500100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000";
//    String UNIONPAY_AID = "9F0607A00000033301019F09020020DF010100DF1105D8689CF800DF1205D8689CF800DF130500100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000000100000DF2106000000000100";
//
//    String VISA_RID = "9F0605A000000003DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF050400000000DF040103";
//    String MASTER_RID = "9F0605A000000004DF0314381A035DA58B482EE2AF75F4C3F2CA469BA4AA6CDF028190A6DA428387A502D7DDFB7A74D3F412BE762627197B25435B7A81716A700157DDD06F7CC99D6CA28C2470527E2C03616B9C59217357C2674F583B3BA5C7DCF2838692D023E3562420B4615C439CA97C44DC9A249CFCE7B3BFB22F68228C3AF13329AA4A613CF8DD853502373D62E49AB256D2BC17120E54AEDCED6D96A4287ACC5C04677D4A5A320DB8BEE2F775E5FEC59F220104DF050400000000DF040103";
//    String JCB_RID = "9F0605A000000065DF0314C75E5210CBE6E8F0594A0F1911B07418CADB5BABDF02819099B63464EE0B4957E4FD23BF923D12B61469B8FFF8814346B2ED6A780F8988EA9CF0433BC1E655F05EFA66D0C98098F25B659D7A25B8478A36E489760D071F54CDF7416948ED733D816349DA2AADDA227EE45936203CBF628CD033AABA5E5A6E4AE37FBACB4611B4113ED427529C636F6C3304F8ABDD6D9AD660516AE87F7F2DDF1D2FA44C164727E56BBC9BA23C02859F220110DF050400000000DF040103";
//    String RUPAY_CTLS_AID1 = "9F0607A00000052460009F09020064DF0101009F1B0400004E20DF1506000000000500DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
//    String RUPAY_CTLS_AID2 = "9F0607A00000052410109F09020002DF0101009F1B0400004E20DF1506000000000000DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
//    String RUPAY_CTLS_AID3 = "9F0607A00000052410119F09020002DF0101009F1B0400004E20DF1506000000000000DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
//    String AMEX_CTLS_AID = "9F0606A000000025019F09020001DF010100DF150400000000DF170100DF160100DF14039F37049F1A0203565F2A0203569F3501229F3303E0E0889F400572000020019F7B06000000001388DF13050010000000DF1205DE00FC9800DF1105DC50FC9800DF2006000100000000DF1906000000000000DF21060000005000009F6604B6404280DF2A020356DF180101";

    String VISA_ctls_AID = "9F0607A00000000310109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105DC4000A800DF2006000000100000DF1906000000000000DF21060000001500019F660433004000DF180101";
    String VISA_AID = "9F0607A00000000310109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150220209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A001DF13050010000000DF1205DC4004F800DF1105DC4000A800";
    String MASTER_ctls_AID = "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000";
    String MASTER_AID = "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A001DF13050000000000DF1205FE50B8F800DF1105FE50B8A000DF180101";
    String JCB_ctls_AID = "9F0607A00000006510109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205FC60ACF800DF1105FC6024A800DF2006999999999999DF1906000000000000DF21060000001500019F6604A2000000DF180101";
    String JCB_AID = "9F0607A00000006510109F09020200DF0101009F1B0400000000DF150400000000DF170110DF16013097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A001DF13050010000000DF1205FC60ACF800DF1105FC6024A800DF180101";
    String UNIONPAY_AID = "9F0607A00000033301019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";

    String VISA_RID = "9F0605A000000003DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF0503311217DF040103";
    String MASTER_RID = "9F0605A000000004DF0314381A035DA58B482EE2AF75F4C3F2CA469BA4AA6CDF028190A6DA428387A502D7DDFB7A74D3F412BE762627197B25435B7A81716A700157DDD06F7CC99D6CA28C2470527E2C03616B9C59217357C2674F583B3BA5C7DCF2838692D023E3562420B4615C439CA97C44DC9A249CFCE7B3BFB22F68228C3AF13329AA4A613CF8DD853502373D62E49AB256D2BC17120E54AEDCED6D96A4287ACC5C04677D4A5A320DB8BEE2F775E5FEC59F220104DF050400000000DF040103";
    String JCB_RID = "9F0605A000000065DF0314C75E5210CBE6E8F0594A0F1911B07418CADB5BABDF02819099B63464EE0B4957E4FD23BF923D12B61469B8FFF8814346B2ED6A780F8988EA9CF0433BC1E655F05EFA66D0C98098F25B659D7A25B8478A36E489760D071F54CDF7416948ED733D816349DA2AADDA227EE45936203CBF628CD033AABA5E5A6E4AE37FBACB4611B4113ED427529C636F6C3304F8ABDD6D9AD660516AE87F7F2DDF1D2FA44C164727E56BBC9BA23C02859F220110DF050400000000DF040103";
    String RUPAY_CTLS_AID1 = "9F0607A00000052460009F09020064DF0101009F1B0400004E20DF1506000000000500DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
    String RUPAY_CTLS_AID2 = "9F0607A00000052410109F09020002DF0101009F1B0400004E20DF1506000000000000DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
    String RUPAY_CTLS_AID3 = "9F0607A00000052410119F09020002DF0101009F1B0400004E20DF1506000000000000DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
    String AMEX_CTLS_AID = "9F0606A000000025019F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205DE00FC9800DF1105DC50fc9800DF2006000000100000DF1906000000000000DF21060000001500019F6604B6404280DF180101DF13050000000000";
    String AMEX_CT_AID = "9F0606A000000025019F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150A393739353831383939369F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050010000000DF1205DE00FC9800DF1105DC50fc9800DF180101";
    String Diners_CTLS_AID1 = "9F0607A00000015230109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205FCE09CF800DF1105DC00002000DF2006999999999999DF1906000000000000DF21060000001500019F6604B6404280DF180101";
    String Diners_CT_AID1 = "9F0607A00000015230109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150A393739353831383939369F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050010000000DF1205FCE09CF800DF1105DC00002000DF180101";
    String Diners_CTLS_AID2 = "9F0607A00000015240109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205FCE09CF800DF1105DC00002000DF2006999999999999DF1906000000000000DF21060000001500019F6604B6404280DF180101";
    String Diners_CT_AID2 = "9F0607A00000015240109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150A393739353831383939369F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050010000000DF1205FCE09CF800DF1105DC00002000DF180101";
    String UPI_CT_AID1 = "9F0607A00000033301019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";
    String UPI_CT_AID2 = "9F0607A00000033301029F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";
    String UPI_CT_AID3 = "9F0607A00000033301039F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";
    String UPI_CTLS_AID1 = "9F0607A00000033301019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF2006999999999999DF1906000000000000DF21060000005000019F660436000000DF180101";
    String UPI_CTLS_AID2 = "9F0607A00000033301029F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF2006999999999999DF1906000000000000DF21060000005000019F660436000000DF180101";
    String UPI_CTLS_AID3 = "9F0607A00000033301039F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF2006999999999999DF1906000000000000DF21060000005000019F660436000000DF180101";
    String PURE_CTLS_AID = "9F0607A00000061500019F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105DC4000A800DF2006999999999999DF1906000000000000DF21060000001500019F660433004000DF180101DF13050000000000";

    String[] AID_SmartCard = {};
    String[] AID_CTLS_Card = {
            "9F0607A00000015230109F09020200DF010100DF1105FC60242800DF1205FC60ACF800DF130500100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000DF1906000000100000DF2006000000100000DF21060000000001009F3303E06008"

    };

    String[] ridList = new String[]{df1b2e39252ea14aa937d0ef2b35dc5c15e5a8deec1510ba0a2759500e86685fb765b102f440bec872503ed7919af72deba2f50b7cc6a4c4bc0548af201c7274faf248239d67fc72a123690300c9a064a5ab97b7f26cfa378a7a0ba3d551b74ea953496858a81ef6a44aa659c253551dd45174bb2a248fdbb66d614ba1c018f952a45c73e1149feadc5b3e2561bef8d4ee0150807ea1dde9b3ddecd5428e3e79721addc660dd28b9cc3bf06066176405d822d659ac7bb9354aa3ba33ddead47dd34b4264e34581DF031492c88f72e3dfc1678ea40d5da5519be1aec001b7DF060101DF070101DF0503311299", "9F2201D39F0605A000000658DF0403010001DF0281909af692ffa01a2cc61b97820aafcbf0844b859726de13ad4caa8d3389a13728b588e1dd33373c8624d9d4be468fa72f5eeebb5fc904a386acef2a4d8a6f8aefd69164cd56183c381bd7fcc2a16c6b12305729ffea766699f54ca01d97761170c7a77b027028f12fb79fcb5e034983743a5ce9c2fe0753021bc9c8ca7555320d0cf4e1182f96bc3a1500c335199e701459DF031424568c62d69fbf64fdd00a16a3b9f132a124ee92DF060101DF070101DF0503311299",};


    public void My01checkCard(Bundle cardOption, int timeout, CheckCardListener listener) {
        try {
            iemv.checkCard(cardOption, timeout * 1000, listener);
            logUtils.addCaseLog("checkCard execute");
        } catch (RemoteException e) {
            logUtils.addCaseLog("checkCard execute exception");
            e.printStackTrace();
        }
    }

    public void My02stopCheckCard() {
        try {
            long startTime = System.currentTimeMillis();
            iemv.stopCheckCard();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("stopCheckCard executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("stopCheckCard execute exception");
            e.printStackTrace();
        }
    }

    public void My03updateAID() {

    }

    public void My04updateRID() {

    }
    public void My20closeCtlsFiled() {
        try {
            Log.d("TAG", "execute My20closeCtlsFiled()");
            irfCardReader.closeRfField();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public boolean updateAID(int operation, int aidType, String aid) {
        try {
            long startTime = System.currentTimeMillis();
            boolean isSuccess = iemv.updateGroupParam(operation, aidType, aid,new Bundle());
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("updateAID executeTime" + (endTime - startTime));
            if (isSuccess) {
                logUtils.addCaseLog("updateAID return true");
                if (aidType == 1) {
                    logUtils.addCaseLog("get contact AID:\n" + Arrays.toString(iemv.getGroupParams(aidType, new Bundle())));
                } else {
                    String strs[] = iemv.getGroupParams(aidType, new Bundle());
//                    logUtils.addCaseLog("get contact-less:\n" + Arrays.toString(iemv.getAID(aidType)));
                    for (int i = 0; i < strs.length; i++) {
                        logUtils.addCaseLog("get contactless:" + strs[i]);
                        Log.d(TAG, "get contactless:" + strs[i]);
                    }

                }
            } else {
                logUtils.addCaseLog("updateAID return false");
            }
            return isSuccess;
        } catch (Exception e) {
            logUtils.addCaseLog("updateAID execute exception");
            e.printStackTrace();
            return false;
        }
    }



    public boolean updateRID(int operation, String rid, boolean needGetRid) {
        try {
            long startTime = System.currentTimeMillis();
            boolean isSuccess = iemv.updateGroupParam(operation, 3,rid,new Bundle());
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("updateRID executeTime" + (endTime - startTime));
            if (isSuccess) {
                logUtils.addCaseLog("updateRID return true");
                if (needGetRid) {
                    int typeCAPK = 3;
                    String[] rids = iemv.getGroupParams(typeCAPK, new Bundle());
                    if (rids != null) {
                        logUtils.addCaseLog("rid size:" + rids.length);
                        int offset = 0;
                        for (String singleRid : rids) {
                            logUtils.addCaseLog("Get RID " + (++offset) + ":\n" + singleRid);
                        }
                    }
                }
            } else {
                logUtils.addCaseLog("updateRID return false");
            }
            return isSuccess;
        } catch (Exception e) {
            logUtils.addCaseLog("updateRID execute exception");
            e.printStackTrace();
            return false;
        }
    }

    public String[] My05getAID(int type) {
        try {
            if (type == 1) {
                long startTime = System.currentTimeMillis();
                String s = Arrays.toString(iemv.getGroupParams(type, new Bundle()));
                long endTime = System.currentTimeMillis();
                logUtils.addCaseLog("Get contact AID executeTime" + (endTime - startTime));
                logUtils.addCaseLog("Get contact AID:\n" + s);
            } else if (type == 2) {
                long startTime = System.currentTimeMillis();
                String strs[] = iemv.getGroupParams(type, new Bundle());
                long endTime = System.currentTimeMillis();
                logUtils.addCaseLog("Get contact-less AID executeTime" + (endTime - startTime));
                for (int i = 0; i < strs.length; i++) {
                    logUtils.addCaseLog("get contactless:" + strs[i]);
                    Log.d(TAG, "get contactless:" + strs[i]);
                }
            } else {
                long startTime = System.currentTimeMillis();
                String s2 = Arrays.toString(iemv.getGroupParams(type, new Bundle()));
                long endTime = System.currentTimeMillis();
                logUtils.addCaseLog("get AID executeTime" + (endTime - startTime));
                logUtils.addCaseLog("Get  AID:\n" + s2);
            }
        } catch (Exception e) {
            logUtils.addCaseLog("Get AID execute exception");
            e.printStackTrace();
        }
        return null;
    }

    public String[] My06getRID() {
        try {
            int typeCAPK = 3;
            long startTime = System.currentTimeMillis();
            String[] rids = iemv.getGroupParams(typeCAPK, new Bundle());
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("get RID executeTime" + (endTime - startTime));
            if (rids != null) {
                logUtils.addCaseLog("rid size:" + rids.length);
                int offset = 0;
                for (String singleRid : rids) {
                    logUtils.addCaseLog("Get RID " + (++offset) + ":\n" + singleRid);
                }
            } else {
                logUtils.addCaseLog("rid size = 0 ");
            }

        } catch (Exception e) {
            logUtils.addCaseLog("getRID execute exception");
            e.printStackTrace();
        }
        return null;
    }

    public void My07importAmount(long amount) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.importAmount(amount);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importAmount executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importAmount execute exception");
            e.printStackTrace();
        }
    }

    public void My08importAppSelect(int index) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.importAppSelection(index);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importAppSelect executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importAppSelect execute exception");
            e.printStackTrace();
        }
    }

    public void My09importPin(int option, byte[] pin) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.importPin(option, pin);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importPin executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importPin execute exception");
            e.printStackTrace();
        }
    }

    public void My10importCertConfirmResult(int option) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.importCertConfirmResult(option);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importCertConfirmResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importCertConfirmResult execute exception");
            e.printStackTrace();
        }
    }

    public void My11importCardConfirmResult(boolean pass) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.importCardConfirmResult(pass);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importCardConfirmResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("\nimportCardConfirmResult execute exception");
            e.printStackTrace();
        }
    }

    public void My12importOnlineResult(Bundle onlineResult, OnlineResultHandler handler) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.importOnlineResult(onlineResult, handler);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importOnlineResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void My13startEMV(final int processType, final Bundle intent, final EMVHandler emvhandler) {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        String msg;

        if (intent == null) {
            msg = "The ginseng error";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            return;
        }
        if (intent.getBoolean("doNotChangeCardType")) {
            int cardType = intent.getInt("cardType");
            if (cardType == 0) logUtils.addCaseLog("Please insert the card");
            else if (cardType == 1) logUtils.addCaseLog("Please swipe the card");
        } else logUtils.addCaseLog("Please insert/wave/swipe your card");

        My01checkCard(cardOption, 30, new CheckCardListener.Stub() {
            String msg;

            @Override
            public void onCardSwiped(Bundle track) throws RemoteException {
                msg = "Card detection: credit card swiped successfully";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                My02stopCheckCard();
            }

            @Override
            public void onCardPowerUp() throws RemoteException {
                msg = "Card test: IC card inserted successfully";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                My02stopCheckCard();
                if (emvhandler == null) {
                    message = new Message();
                    msg = "Handler is null";
                    message.getData().putString("message", msg);
                    handler.sendMessage(message);
                }
                try {
                    Bundle intent1 = intent;
                    iemv.startEMV(processType, intent1, emvhandler);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onCardActivate() throws RemoteException {
                msg = "Card test: the card is successfully connected";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);


                My02stopCheckCard();
                if (emvhandler == null) {
                    message = new Message();
                    Log.d(TAG, "Handler is null");
                    msg = "Handler is null";
                    message.getData().putString("message", msg);
                    handler.sendMessage(message);
                }

                try {
                    Bundle intent1 = intent;



                    if (intent.getBoolean("doNotChangeCardType") == false)
                        intent1.putInt("cardType", 1);

                    iemv.startEMV(processType, intent1, emvhandler);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onTimeout() throws RemoteException {
                logUtils.addCaseLog("Card detection: timeout");
                My02stopCheckCard();
                Message message1 = new Message();
                message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }

            @Override
            public void onError(int error, String message) throws RemoteException {
                msg = "Card detection: Error" + error + message;

                My02stopCheckCard();
                Message message1 = new Message();
                if (error == 3) message1.getData().putString("message", msg + "Fallback deal");
                else message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }
        });
    }

    public void My14abortEMV() {
        try {
            long startTime = System.currentTimeMillis();
            iemv.abortEMV();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("abortEMV executeTime" + (endTime - startTime));
        } catch (Exception e) {
            logUtils.addCaseLog("abortEMV execute exception");
            e.printStackTrace();
        }
    }

    public byte[] My15getCardData(String tagName) {
        try {
            long startTime = System.currentTimeMillis();
            byte[] strs = iemv.getCardData(tagName);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getCardData executeTime" + (endTime - startTime));
            logUtils.addCaseLog("getCardData execute completed TAG:" + tagName + "\n");
//            if (null != strs && strs.length > 0) {
            if (null != strs && strs.length > 0) {
                logUtils.addCaseLog("get tag = " + StringUtil.byte2HexStr(strs));
            } else {
                logUtils.addCaseLog("Return length null");
            }
            return strs;
        } catch (Exception e) {
            logUtils.addCaseLog("getCardData execute exception");
            e.printStackTrace();
            return null;
        }
    }

    private String byte2HexStr(byte[] strs) {
        return null;
    }

    public void My16setEMVData(List<String> tlvList) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.setEMVData(tlvList);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("setEMVData executeTime" + (endTime - startTime));
            ArrayList<String> taglist = new ArrayList<String>();
            for (String str : tlvList) {
                Map<String, String> map = TlvUtil.tlvToMap(str);
                Set<Map.Entry<String, String>> entrys = map.entrySet();
                for (Map.Entry<String, String> entry : entrys) {
                    Log.d(TAG, entry.getKey() + " display--> " + entry.getValue());
                    taglist.add(entry.getKey());
                }
            }
            logUtils.addCaseLog("getAppTLVList:" + iemv.getAppTLVList(taglist.toArray(new String[0])));
        } catch (Exception e) {
            logUtils.addCaseLog("setEMVData execute exception");
            e.printStackTrace();
        }
    }

    public void My17getAppTLVList(String[] tagList) {
        try {
            long startTime = System.currentTimeMillis();
            String strs = iemv.getAppTLVList(tagList);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getAppTLVList executeTime" + (endTime - startTime));
            if (null != strs) {
                logUtils.addCaseLog("AppTLVList: " + strs);
            } else {
                logUtils.addCaseLog("Return length null");
            }
        } catch (Exception e) {
            logUtils.addCaseLog("getAppTLVList call exception");
            e.printStackTrace();
        }
    }

    public String My18getEMVData(String tagName) {
        try {
            long startTime = System.currentTimeMillis();
            String str = iemv.getEMVData(tagName);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getEMVData executeTime" + (endTime - startTime));
            logUtils.addCaseLog("getEMVData execute" + tagName);
            if (null != str && str.length() > 0) {
                logUtils.addCaseLog("getEMVData return " + str);
            } else {
                logUtils.addCaseLog("getEMVData return null");
            }
            return str;
        } catch (Exception e) {
            logUtils.addCaseLog("getEMVData execute exception");
            e.printStackTrace();
            return null;
        }
    }

    public int My19getProcessCardType() {
        try {
            long startTime = System.currentTimeMillis();
            int ret = iemv.getProcessCardType();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getProcessCardType executeTime" + (endTime - startTime));
            logUtils.addCaseLog("No card type:" + ret);
            return ret;
        } catch (Exception e) {
            logUtils.addCaseLog("Gets the card type that is not connected execute exception");
            e.printStackTrace();
            return -1;
        }
    }

    public void My20registerKernelAID(Map customAidList) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.registerKernelAID(customAidList);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("registerKernelAID executeTime" + (endTime - startTime));
            logUtils.addCaseLog("registerKernelAID execute");
        } catch (Exception e) {
            logUtils.addCaseLog("registerKernelAID execute exception");
            e.printStackTrace();
        }
    }

    public boolean My21updateVisaAPID(int operation, DRLData drlData) {
        try {
            long startTime = System.currentTimeMillis();
            Bundle bundle = new Bundle();
            bundle.putParcelable("DRLData", drlData);
            boolean ret = iemv.updateGroupParam(operation, 4, null, bundle);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("updateVisaAPID executeTime" + (endTime - startTime));
            logUtils.addCaseLog("updateVisaAPID execute:" + ret);
            return ret;
        } catch (Exception e) {
            logUtils.addCaseLog("updateVisaAPID execute exception");
            e.printStackTrace();
            return false;
        }
    }

    public boolean My22updateCardBlk(int operation, BLKData blkData, int type) {
        try {
            long startTime = System.currentTimeMillis();
            boolean ret = iemv.updateCardBlk(operation, blkData, type);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("updateCardBlk executeTime" + (endTime - startTime));
            logUtils.addCaseLog("updateCardBlk execute:" + ret);
            return ret;
        } catch (Exception e) {
            logUtils.addCaseLog("updateCardBlk execute exception");
            e.printStackTrace();
            return false;
        }
    }

    public int My23emvProcessingRequestOnline() {
        try {
            long startTime = System.currentTimeMillis();
            int ret = iemv.emvProcessingRequestOnline();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("emvProcessingRequestOnline executeTime" + (endTime - startTime));
            logUtils.addCaseLog("emvProcessingRequestOnline execute:" + ret);
            return ret;
        } catch (Exception e) {
            logUtils.addCaseLog("emvProcessingRequestOnline execute exception");
            e.printStackTrace();
            return -1;
        }
    }

    public String[] My24getCAPK() {

        try {
            long startTime = System.currentTimeMillis();
            int typeCapk = 3;
            String getCAPK = Arrays.toString(iemv.getGroupParams(typeCapk, new Bundle()));
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("Get CAPK executeTime" + (endTime - startTime));
            logUtils.addCaseLog("Get CAPK:\n" + getCAPK);
        } catch (Exception e) {
            logUtils.addCaseLog("getCAPK get CAPK");
            e.printStackTrace();
        }
        return null;
    }

    public void My25enableTrack(int trkNum) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.enableTrack(trkNum);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("enableTrack executeTime" + (endTime - startTime));
            logUtils.addCaseLog("enableTrack execute result:");
        } catch (Exception e) {
            logUtils.addCaseLog("enableTrack execute exception");
            e.printStackTrace();
        }
    }


    public void My26checkCardMs(Bundle cardOption, long timeout, CheckCardListener listener) {
        try {
            long startTime = System.currentTimeMillis();
            iemv.checkCard(cardOption, timeout, listener);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("checkCard executeTime" + (endTime - startTime));
            logUtils.addCaseLog("checkCard execute");
        } catch (RemoteException e) {
            logUtils.addCaseLog("checkCard execute exception");
            e.printStackTrace();
        }
    }


    private class MyEmvHandler extends EMVHandler.Stub {
        String msg;
        String str;
        Bundle importData;

        public MyEmvHandler(Bundle importData) {
            this.importData = importData;
        }

        @Override
        public void onRequestAmount() throws RemoteException {
            Log.d(TAG, "onRequestAmount callback");
            Boolean cancelAmountConfirmResult = importData.getBoolean("cancelAmountConfirmResult");
            if (cancelAmountConfirmResult) {
                My14abortEMV();
                msg = "Cancel import amount";
            } else {
                msg = "Please import the amount:" + importData.getLong("importAmount");
                //import amount to kernel
                My07importAmount(importData.getLong("importAmount"));
            }
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);
        }

        @Override
        public void onSelectApplication(List<Bundle> appList) throws RemoteException {
            int i = 1;
            Log.d(TAG, "onSelectApplication callback");

            Boolean cancelSelectApplication = importData.getBoolean("cancelSelectApplication");
            if (cancelSelectApplication) {
                My14abortEMV();
                logUtils.addCaseLog("Deselect the application");
                return;
            }
            if (importData.getString("testAppSelectTimeOut", null) != null) {
                logUtils.addCaseLog("AppSelectTimeOut=" + importData.getString("testAppSelectTimeOut", null));
                logUtils.addCaseLog("test app selection timeout,skip import app selection flow");
                return;
            }

            for (Bundle app : appList) {
                String str1 = app.getString("aidName");
                String str2 = app.getString("aidLabel");
                String str3 = app.getString("aid");
                msg = msg + (i++ + ".aidName=" + str1 + " aidLabel=" + str2 + " aid=" + str3 + "\n");
            }
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);

            My08importAppSelect(importData.getInt("importAppSelectindex"));
        }

        @Override
        public void onConfirmCardInfo(Bundle info) throws RemoteException {
//            Looper.prepare();
            String result = "onConfirmCardInfo callback, \nPAN:" + info.getString("PAN") + "\nTRACK2:" + info.getString("TRACK2") + "\nCARD_SN:" + info.getString("CARD_SN") + "\nSERVICE_CODE:" + info.getString("SERVICE_CODE") + "\nEXPIRED_DATE:" + info.getString("EXPIRED_DATE") + "\nCARD_TYPE:" + info.getInt("CARD_TYPE");
            if (importData.getBoolean("needStopCheckCard", false)) {
                iemv.stopCheckCard();
            }
            if (importData.getBoolean("getCDCVMTransactionMediumType", false) ) {
                int cardMediumType = iemv.getCDCVMTransactionMediumType();
                Log.d(TAG, "cardMediumType: " + cardMediumType);
                msg = "cardMediumType: " + cardMediumType;
                Message message1 = new Message();
                message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }

            Boolean getData = importData.getBoolean("getEMVata");
            if (getData) {
                String strs = "PAN:" + My18getEMVData("PAN") + "\n" + "TRACK2:" + My18getEMVData("TRACK2") + "\n" + "CARD_SN:" + My18getEMVData("CARD_SN") + "\n" + "EXPIRED_DATE:" + My18getEMVData("EXPIRED_DATE") + "\n" + "DATE:" + My18getEMVData("DATE") + "\n" + "TIME:" + My18getEMVData("TIME") + "\n" + "BALANCE:" + My18getEMVData("BALANCE") + "\n" + "CURRENCY:" + My18getEMVData("CURRENCY");

                Log.d(TAG, "getEMVData : " + strs);
                msg = strs;
                Message message1 = new Message();
//                message1.getData().putString("message", "");
                message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }

            Boolean isGetCardData = importData.getBoolean("isGetCardData");
            if (isGetCardData == true) {
                if ("StandardData".equals(importData.getString("getCardData"))) {
                    My15getCardData("9F26");
                    My15getCardData("9F10");
                    My15getCardData("9F02");
                    My15getCardData("DF79");
                    My15getCardData("8E");
                    My15getCardData("9F1B");
                } else {
//                    My14getCardData(importData.getString("getCardData"));
                }
            }

            ArrayList<String> emvData = importData.getStringArrayList("emvDataList");
            if (emvData != null) {
                My16setEMVData(emvData);
            }

            if (importData.getBoolean("emptyEmvData")) {
                My16setEMVData(null);
            }

            if (importData.getBoolean("isForceOnlineWhenCardConfirm")) {
                My23emvProcessingRequestOnline();
            }

            Boolean CancelCardConfirmResult = importData.getBoolean("cancelCardConfirmResult");

            if (CancelCardConfirmResult) {
//                My14abortEMV();
                msg = "Card number:" + info.getString("PAN") + "cancel";
                My11importCardConfirmResult(false);
            } else {
                msg = "Card number:" + info.getString("PAN") + "confirm";
                My11importCardConfirmResult(true);
//                ((MyApplication) context).serviceMoudle.getPintBtMoudle().D14001();
            }


            msg = result;
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            Log.d(TAG, "onConfirmCardInfo: " + msg);
            handler.sendMessage(message1);


        }

        @Override
        public void onRequestInputPIN(boolean isOnlinePin, int retryTimes) throws RemoteException {

            String result = "onRequestInputPIN callback, isOnlinePin:" + isOnlinePin + "\n" + "retryTimes:" + retryTimes;

            int IsPinInput = importData.getInt("IsPinInput");

            if (importData.getBoolean("isPinpadError")) {
                if (isOnlinePin) msg = "Request online PIN: password keyboard error";
                else msg = "Request offline PIN: password keyboard error";
            } else {
                if (IsPinInput == 0) {
                    if (isOnlinePin) msg = "Request online PIN: Cancel";
                    else msg = "Request offline PIN: Cancel";
//                    My14abortEMV();
                } else {
                    if (isOnlinePin) msg = "Request online PIN: " + IsPinInput;
                    else msg = "Request offline PIN: " + IsPinInput + "Retry count：" + retryTimes;
                }
            }

            ArrayList<String> emvData = importData.getStringArrayList("emvDataList");
            if (emvData != null && !emvData.isEmpty()) {
                My16setEMVData(emvData);
            }

            //M14004案例，属于密码时取消EMV
            if (importData.getBoolean("cancelEmvWhenInputPin")) {
                M14005();
            }

            msg = result;
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);


            if (importData.getBoolean("isForceOnlineWhenInputPin")) {
                My23emvProcessingRequestOnline();
            }

            //联机PIN直接导入，脱机PIN调用密码假盘
            if (!isOnlinePin) {
                executeOfflinePinInput(importData);
            } else {
                String importpin = importData.getString("importPIN");
                if (importpin == null) My09importPin(IsPinInput, null);
                else My09importPin(IsPinInput, importpin.getBytes());
            }
        }

        @Override
        public void onConfirmCertInfo(String certType, String certInfo) throws RemoteException {
            Log.d(TAG, "onConfirmCertInfo callback, certType:" + certType + "certInfo:" + certInfo);

            msg = "Certification: Confirmation";
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);

            iemv.importCertConfirmResult(1);
        }

        @Override
        public void onRequestOnlineProcess(Bundle aaResult) throws RemoteException {
            String result = "onRequestOnlineProcess callback SIGNATURE:" + aaResult.getBoolean("SIGNATURE") + "\nCTLS_CVMR:" + aaResult.getInt("CTLS_CVMR") + "\nRESULT:" + aaResult.getInt("RESULT") + "\nARQC_DATA:" + aaResult.getString("ARQC_DATA") + "\nREVERSAL_DATA:" + aaResult.getString("REVERSAL_DATA");
            Boolean getAppTLVListOption = importData.getBoolean("getAppTLVListOption");
            Boolean setEmvData = importData.getBoolean("issetEMVdata");
            if (getAppTLVListOption) {
                String[] strlist = {"9F26", "9F27", "9F10", "9F37", "9F1A", "9F36", "95", "9A", "9C", "9F02", "5F2A", "82", "9F03", "9F33", "9F34", "9F35", "84", "9F1E", "9F09", "9F41", "8E", "9F63"};
                My17getAppTLVList(strlist);
            }

            if (setEmvData) {
                byte[] acquirerID = {(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05};
                byte[] termCap = {(byte) 0xe0, (byte) 0xf1, (byte) 0xc8};
                byte[] addTermCap = {(byte) 0xe0, (byte) 0x00, (byte) 0xF0, (byte) 0xA0, (byte) 0x01};
                byte[] countryCode = {(byte) 0x01, (byte) 0x56};
                byte[] currencyCode = {(byte) 0x01, (byte) 0x56};
                byte[] termType = {(byte) 0x22};

                ArrayList<String> tlvList = new ArrayList<String>();

                tlvList.add(byte2HexStr(asc2Bcd("9F0106")) + byte2HexStr(acquirerID));
                tlvList.add(byte2HexStr(asc2Bcd("9F3501")) + byte2HexStr(termType));
                tlvList.add(byte2HexStr(asc2Bcd("9F3303")) + byte2HexStr(termCap));
                tlvList.add(byte2HexStr(asc2Bcd("9F4005")) + byte2HexStr(addTermCap));
                tlvList.add(byte2HexStr(asc2Bcd("9F1A02")) + byte2HexStr(countryCode));
                tlvList.add(byte2HexStr(asc2Bcd("5F2A02")) + byte2HexStr(currencyCode));
                My16setEMVData(tlvList);
            }

            String[] tvr = {"95"};
//            My13getAppTLVList(tvr);
            Boolean getProcessCardType = importData.getBoolean("isgetProcessCardType");
            if (getProcessCardType) {
                My19getProcessCardType();
            }

            msg = "\nOnline request: " + "\n" + result;
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);




            My12importOnlineResult(importData, new MyOnlineResultHandler());
        }

        @Override
        public void onTransactionResult(int result, Bundle data) throws RemoteException {
            Log.i(TAG, "onTransactionResult callback, result:" + result + "\nTC_DATA:" + data.getString("TC_DATA") + "\nREVERSAL_DATA:" + data.getString("REVERSAL_DATA") + "\nERROR:" + data.getString("ERROR") + "\nSIGNATURE:" + data.getBoolean("SIGNATURE") + "\nCTLS_CVMR:" + data.getInt("CTLS_CVMR"));
            msg = "results:" + result + "\nTC_DATA:" + data.getString("TC_DATA") + "\nREVERSAL_DATA:" + data.getString("REVERSAL_DATA") + "\nERROR:" + data.getString("ERROR") + "\nSIGNATURE:" + data.getBoolean("SIGNATURE") + "\nCTLS_CVMR:" + data.getInt("CTLS_CVMR");
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);
        }
    }

    private void executeOfflinePinInput(final Bundle importData) {
        //格式化密钥区
        //FormatKeyArea();
        int keyId = 99;
        Bundle param = new Bundle();
        Bundle globalparam = new Bundle();
        byte[] pinLimit = {4, 6};
        param.putByteArray("pinLimit", pinLimit);
        param.putInt("timeout", 20);
        param.putBoolean("isOnline", false);
        param.putString("promptString", "please input your cardpin:");
        param.putString("pan", "6226901508781352");
        param.putInt("desType", 1);//3DES
        param.putString("numbersFont", "");
        param.putString("promptsFont", "");
        param.putString("otherFont", "");
        param.putByteArray("displayKeyValue", null);
        param.putBoolean("notificatePinLenError", true);

        globalparam.putString("Display_One", null);
        globalparam.putString("Display_Two", null);
        globalparam.putString("Display_Three", null);
        globalparam.putString("Display_Four", null);
        globalparam.putString("Display_Five", null);
        globalparam.putString("Display_Six", null);
        globalparam.putString("Display_Seven", null);
        globalparam.putString("Display_Eight", null);
        globalparam.putString("Display_Nine", null);
        globalparam.putString("Display_Zero", null);
        globalparam.putString("Display_Confirm", null);
        globalparam.putString("Display_BackSpace", null);
        IPinpad iPinpad = null;
        try {
            iPinpad = MyApplication.serviceMoudle.deviceService.getPinpad(1);
        } catch (RemoteException e) {
            e.printStackTrace();
        }

        try {
            final IPinpad finalIPinpad = iPinpad;
            iPinpad.startPinInput(keyId, param, globalparam, new PinInputListener.Stub() {
                @Override
                public void onInput(int len, int key) throws RemoteException {
                    Log.i(TAG, "len=" + len + " key=" + key);
                    Message msg = new Message();
                    msg.getData().putString("msg", "Password length entered len=" + len + " The current key value=" + key);
                    handler.sendMessage(msg);
                }

                @Override

                public void onConfirm(@NonNull byte[] data, boolean isNonePin) throws RemoteException {
                    Log.i(TAG, "PIN: " + StringUtil.byte2HexStr(data));

                    Log.i(TAG, "isNonePin:" + isNonePin);
                    Message msg = new Message();
                    Log.i(TAG, "PIN: " + StringUtil.byte2HexStr(data));
//                        logUtils.addCaseLog("PIN: " + StringUtil.byte2HexStr(data));
                    msg.getData().putString("msg", "isNonePin:" + isNonePin + "\nPIN: " + StringUtil.byte2HexStr(data));
                    handler.sendMessage(msg);

                    String importpin = importData.getString("importPIN");
                    if (importpin == null) My09importPin(1, null);
                    else My09importPin(1, importpin.getBytes());

                }

                @Override
                public void onCancel() throws RemoteException {
                    Log.i(TAG, "onCancel Cancel PIN Input");
                    Message msg = new Message();
                    msg.getData().putString("msg", "onCancel Cancel PIN Input");
                    handler.sendMessage(msg);

                    My09importPin(0, null);
                }

                @Override
                public void onError(int errorCode) throws RemoteException {
                    Log.i(TAG, "onError:" + errorCode);
                    Message msg = new Message();
//                    String errString = finalIPinpad.getLastError();
//                    if (errString != null) {
//                        Log.i(TAG, "getLastError=" + errString);
//                        msg.getData().putString("msg", errString);
//                        handler.sendMessage(msg);
//                        return;
//                    }
                    msg.getData().putString("msg", "onError:" + errorCode);
                    handler.sendMessage(msg);

                    My09importPin(0, null);
                }
            });
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void My27turnOn(int led) {
        try {
            logUtils.addCaseLog("turnOn execute");
            iledDriver.turnOn(led);
//            this.printLedInfo(led, 1);
        } catch (RemoteException e) {
            logUtils.addCaseLog("turnOn Perform abnormal");
            e.printStackTrace();
        }
    }

    private void printLedInfo(int led, int status) {
        String msg = "";
        if (led == 1) {
            msg = "Execution result: blue light";
        } else if (led == 2) {
            msg = "Execution result: yellow light";
        } else if (led == 3) {
            msg = "Execution result: green light";
        } else if (led == 4) {
            msg = "Execution result: red light";
        }

        if (status == 1) {
            this.printMsgTool(msg + "Light up");
        } else if (status == 0) {
            this.printMsgTool(msg + "Put out");
        } else if (status == 2) {
            this.printMsgTool(msg + "flashing");
        }
    }

    public void My28turnOff(int led) {
        try {
            logUtils.addCaseLog("turnOff execute");
            iledDriver.turnOff(led);
            this.printLedInfo(led, 0);
        } catch (RemoteException e) {
            logUtils.addCaseLog("turnOff Perform abnormal");
            e.printStackTrace();
        }
    }

    public void My29startBeep(int ms) {
        try {
            logUtils.addCaseLog("Execute startBeep success");
            iBeeper.startBeep(ms);
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute startBeep Failed");
            e.printStackTrace();
        }
    }

    //kernel 版本获取
    public void My30getCtlsSpecVer() {
        try {
            logUtils.addCaseLog("Execute getCtlsSpecVer success");
            logUtils.addCaseLog("kernel version is :" + iemv.getCtlsSpecVer() + ".");
            this.printMsgTool("kernel version is :" + iemv.getCtlsSpecVer() + ".");
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute getCtlsSpecVer Failed");
            this.printMsgTool("Execute getCtlsSpecVer Failed");
            e.printStackTrace();
        }
    }

    public void My31byPassPin(boolean byPass) {
        try {
            logUtils.addCaseLog("Execute My31SetByPass success");
            iemv.setByPassAllPin(byPass);
            logUtils.addCaseLog("isByPassAllPin :" + iemv.isByPassAllPin());
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute My31SetByPass Failed");
            e.printStackTrace();
        }
    }

    public void My32setAcType(MyAcTypeCallback myAcTypeCallback) {
        try {
            logUtils.addCaseLog("Execute My32setAcType");
            iemv.setRequestACTypeCallBack(myAcTypeCallback);
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute My32setAcType Failed");
            e.printStackTrace();
        }
    }

    public void My33setIssuerUpdate(MyIssuerUpdateCallback myIssuerUpdateCallback) {
        try {
            logUtils.addCaseLog("Execute My33setIssuerUpdate");
            iemv.setIssuerUpdateHandler(myIssuerUpdateCallback);
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute My33setIssuerUpdate Failed");
            e.printStackTrace();
        }
    }

    public boolean My34updateGroupParam(int operation, int paramType, String params, Bundle bundle) {


        boolean ret = false;
        try {
            ret = iemv.updateGroupParam(operation, paramType, params, bundle);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
        logUtils.addCaseLog("return ret = " + ret);
        logUtils.addCaseLog("operation = " + operation + ";paramType = " + paramType + ";params = " + params + ";groupName = " + bundle.getString("groupName") + ";DRLData = " + bundle.<Parcelable>getParcelable("DRLData"));
        return ret;
    }


    public void My35setFinalAppSelectCallBack(){
//        logUtils.addCaseLog("My35SetFinalAppSelectCallback executed");
//        try {
//            iemv.setFinalAppSelectCallBack(finalAppSelectHandler);
//        } catch (RemoteException e) {
//            throw new RuntimeException(e);
//        }
    }

    public void My36getAllKeysInfo(){

    }

    public void My37isWarrantyKeyExists(){

    }

    private void printMsgTool(String msg) {
        //((MyApplication) context).serviceMoudle.getPintBtMoudle().printMsg(msg);
//        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//        File txtFile = new File("E:\\test_log\\LedMoudle_" + sdf.format(new Date()).substring(0, 9) + ".txt");
//        if (!txtFile.exists()) {
//            txtFile.mkdirs();
//        }
//        try {
//            PrintWriter pw = new PrintWriter(txtFile);
//            pw.println(msg);
//            pw.close();
//
//            Thread.sleep(1000);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }

        ((MyApplication) context).serviceMoudle.getPintBtMoudle().printMsg(msg);
        try {
            Thread.sleep(1000);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void M01001() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
//        My27turnOn(1);
    }

    public void M01002() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", false);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01003() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", false);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01004() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01005() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", false);
        My01checkCard(cardOption, 3600, new MyListener());
    }

    public void M01006() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01007() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01008() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", false);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01009() {
        My01checkCard(null, 30, new MyListener());
    }

    public void M01010() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, null);
    }

    public void M01011() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01012() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 0, new MyListener());
    }

    public void M01013() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, -1, new MyListener());
    }

    public void M01014() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 301, new MyListener());
    }

    public void M01015() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 300, new MyListener());
    }

    public void M01016() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01017() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01018() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01019() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01020() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener());
    }

    public void M01021() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 30, new MyListener(true));
    }

    public void M01022() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My01checkCard(cardOption, 300, new MyListener());
    }


    public void M02001() {
        My02stopCheckCard();
        My20closeCtlsFiled();
    }


    public void M02002() {
        M01001();
        new Thread() {
            @Override
            public void run() {
                super.run();
                try {
                    this.sleep(10000);
                    My02stopCheckCard();
                    My20closeCtlsFiled();
                    Message message = new Message();
                    message.getData().putString("message", "stopCheckCard completed");
                    handler.sendMessage(message);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    public void M02003() {
        M01001();
        new Thread() {
            @Override
            public void run() {
                super.run();
                try {
                    this.sleep(10000);
                    My02stopCheckCard();
                    My20closeCtlsFiled();
                    Message message = new Message();
                    message.getData().putString("message", "stopCheckCard completed");
                    handler.sendMessage(message);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    public void M02004() {
        M01001();
        new Thread() {
            @Override
            public void run() {
                super.run();
                try {
                    this.sleep(10000);
                    My02stopCheckCard();
//                    My20closeCtlsFiled();
                    Message message = new Message();
                    message.getData().putString("message", "stopCheckCard completed");
                    handler.sendMessage(message);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }.start();
    }

    public void M03001() {
        updateAID(1, 1, "9F0607A00000000310109F0902008CDF0101009F1B0400000000DF150400000000DF170101DF16010197099F1A0295059A039C01DF14039F37049F1A0203565F2A0203569F3501229F3303E0F0C89F4005F000F0A0019F7B06000000001388DF13050010000000DF1205DC4004F800DF1105DC4000A800DF180101");
    }

    public void M03002() {
        updateAID(1, 2, "9F0607A00000000310109F0902008CDF010100DF150400000000DF170100DF160100970F9F02065F2A029A039C0195059F3704DF14039F37049F1A0203565F2A0203569F3501229F3303E060089F400572000020019F7B06000000001388DF13050400000000DF1205F850ACF800DF1105FC50ACA000DF2006000099999999DF1906000000020000DF21060000002000009F660436204000DF2A020356DF180101");
    }

    public void M03003() {
        updateAID(1, 1, MASTER_AID);
    }

    public void M03004() {
        updateAID(1, 2, MASTER_ctls_AID);
    }

    public void M03005() {
        updateAID(1, 1, JCB_AID);
    }

    public void M03006() {
        updateAID(1, 2, JCB_ctls_AID);
    }

    public void M03007() {
        updateAID(2, 1, VISA_AID);
    }

    public void M03008() {
        updateAID(2, 1, VISA_AID);
    }

    public void M03009() {
        updateAID(2, 2, VISA_ctls_AID);
    }

    public void M03010() {
        updateAID(2, 1, MASTER_AID);
    }

    public void M03011() {
        updateAID(2, 2, MASTER_ctls_AID);
    }

    public void M03012() {
        updateAID(3, 1, VISA_ctls_AID);
    }

    public void M03013() {
        updateAID(3, 2, VISA_ctls_AID);
    }

    public void M03014() {
        updateAID(0, 1, VISA_AID);
    }

    public void M03015() {
        updateAID(4, 1, VISA_AID);
    }

    public void M03016() {
        updateAID(1, 0, VISA_AID);
    }

    public void M03017() {
        updateAID(1, 3, VISA_AID);
    }

    public void M03018() {
        updateAID(1, 1, null);
    }

    public void M03019() {
        updateAID(1, 1, "");
    }

    public void M03020() {
        updateAID(2, 1, null);
    }

    public void M03021() {
        updateAID(2, 1, "");
    }

    public void M03022() {
        updateAID(3, 1, null);
    }

    public void M03023() {
        updateAID(3, 2, "");
    }

    public void M03024() {
        //floor limit changed from 00000500 to 00000499 9F1B
        String VISA_AID_change = "9F0607A00000000310109F0902008CDF010100DF1105D84000A800DF1205D84004F800DF130508100000009F1B0400000499DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000";
        updateAID(1, 1, VISA_AID_change);
    }

    public void M03025() {
        int cnt = 100;
        int i;
        boolean ret = false;
        String aidstr;

        for (i = 0; i < cnt; i++) {
            String str = "9F0607A00000000310" + String.format("%02d", i);//两位数，不足位补0
            logUtils.addCaseLog("APP ID " + str);
            aidstr = "9F0607A00000000310109F0902008CDF010100DF1105D84000A800DF1205D84004F800DF130508100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000";
            String aidstr1 = aidstr.replaceAll("9F0607A0000000031010", str);
            ret = updateAID(1, 1, aidstr1);
            if (ret) {
                logUtils.addCaseLog("APP ID" + i + "add success");
            } else {
                logUtils.addCaseLog("APP ID" + i + "add failed");
            }
        }
    }

    public void M03026() {
        //支持联机PIN，DF18 = 01
        String VISA_ctls_AID2 = "9F0607A00000000310109F0902008CDF010100DF1105D84000A800DF1205D84004F800DF130508100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801019F7B06000000100000DF1906000000100000DF2006000000100000DF2106000000000100";
        String VISA_AID2 = "9F0607A00000000310109F0902008CDF010100DF1105D84000A800DF1205D84004F800DF130508100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801019F7B06000000100000";
        updateAID(1, 1, VISA_AID2);
        updateAID(1, 2, VISA_ctls_AID2);
    }




    public void M03027() {
        updateAID(1, 1, AMEX_CT_AID);
    }




    public void M03028() {
        updateAID(1, 2, AMEX_CTLS_AID);
    }




    public void M03029() {
        updateAID(1, 1, UPI_CT_AID1);
        updateAID(1, 1, UPI_CT_AID2);
        updateAID(1, 1, UPI_CT_AID3);
    }





    public void M03030() {
        updateAID(1, 2, UPI_CTLS_AID1);
        updateAID(1, 2, UPI_CTLS_AID2);
        updateAID(1, 2, UPI_CTLS_AID3);
    }





    public void M03031() {
        updateAID(1, 2, RUPAY_CTLS_AID1);
        updateAID(1, 2, RUPAY_CTLS_AID2);
        updateAID(1, 2, RUPAY_CTLS_AID3);
    }


    public void M03032() {
        updateAID(1, 2, PURE_CTLS_AID);
    }





    public void M03033() {
        updateAID(1, 1, Diners_CT_AID1);
        updateAID(1, 1, Diners_CT_AID2);
    }





    public void M03034() {
        updateAID(1, 2, Diners_CTLS_AID1);
        updateAID(1, 2, Diners_CTLS_AID2);
    }

    //越南客户生产AID测试(CTLS)
    public void M03035() {
        updateAID(1, 2, "9F0607A00000000310109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0B8C89F4005F000F0A0019F7B06000000001388DF2D0102DF13050000000000DF1205F45084800CDF1105F45084800CDF2006099999999900DF1906000000000000DF21060000000050009F660422004000DF180101");
        updateAID(1, 2, "9F0607A00000000320109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0B8C89F4005F000F0A0019F7B06000000001388DF2D0102DF13050000000000DF1205F45084800CDF1105F45084800CDF2006099999999900DF1906000000000000DF21060000000050009F660422004000DF180101");
        updateAID(1, 2, "9F0605A0000003089F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0B8C89F4005F000F0A0019F7B06000000001388DF2D0102DF13050000000000DF1205F45084800CDF1105F45084800CDF2006099999999900DF1906000000000000DF21060000000050009F660422004000DF180101");
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0B8C89F4005F000F0A0019F7B06000000001388DF2D0102DF13050000000000DF1205F45084800CDF1105F45084800C9F1D082C62800000000000DF811B01B0DF2006009999999999DF81180130DF811E0120DF1906000000000000DF2106000000005000DF180101");
        updateAID(1, 2, "9F0608A0000003330101019F09020030DF0101009F1B0400000000DF150400000000DF170199DF16019997099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0F8C89F4005F000F0A0019F7B06099999999900DF2D0102DF13050000000000DF1205DC4004F800DF1105D84000A800DF2006099999999900DF1906000000000000DF2106000000030000DF180101");
        updateAID(1, 2, "9F0608A0000003330101029F09020030DF0101009F1B0400000000DF150400000000DF170199DF16019997099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0F8C89F4005F000F0A0019F7B06099999999900DF2D0102DF13050000000000DF1205DC4004F800DF1105D84000A800DF2006099999999900DF1906000000000000DF2106000000030000DF180101");
        updateAID(1, 2, "9F0608A0000003330101039F09020030DF0101009F1B0400000000DF150400000000DF170199DF16019997099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0F8C89F4005F000F0A0019F7B06099999999900DF2D0102DF13050000000000DF1205DC4004F800DF1105D84000A800DF2006099999999900DF1906000000000000DF2106000000030000DF180101");
        updateAID(1, 2, "9F0608A0000003330101089F09020030DF0101009F1B0400000000DF150400000000DF170199DF16019997099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0F8C89F4005F000F0A0019F7B06099999999900DF2D0102DF13050000000000DF1205DC4004F800DF1105D84000A800DF2006099999999900DF1906000000000000DF2106000000030000DF180101");
        updateAID(1, 2, "9F0607A00000006510109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0B8C89F4005F000F0A0019F7B06000000001388DF2D0102DF13050010000000DF1205FC60ACF800DF1105FC6024A800DF2006099999999900DF1906000000000000DF21060001000000009F660422000080DF180101");
        updateAID(1, 2, "9F0605A0000006779F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0F8C89F4005F000F0A0019F7B06000000001388DF2D0102DF13050010000000DF1205FC78FCF8F0DF1105FC78FCF8F0DF2006099999999900DF1906000000000000DF2106000100000000DF180101");
        updateAID(1, 2, "9F0605A0000007279F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207045F2A0207049F3501229F3303E0E8C89F400536006003D99F7B06000000001388DF2D0101DF2F0120DF13050000980000DF1205A4D0048000DF1105A4D0048000DF2006099999999900DF1906000000000000DF2106000100000000DF180101");

    }

    public void M04001() {
        updateRID(1, VISA_RID, true);
    }

    public void M04002() {
        updateRID(1, MASTER_RID, true);
    }

    public void M04003() {
        updateRID(1, JCB_RID, true);
    }

    public void M04004() {
        updateRID(2, VISA_RID, true);
    }

    public void M04005() {
        updateRID(2, MASTER_RID, true);
    }

    public void M04006() {
        updateRID(2, JCB_RID, true);
    }

    public void M04007() {
        updateRID(2, VISA_RID, true);
    }

    public void M04008() {
        updateRID(2, "9F0605A000000004DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220117DF050400000000DF040103", true);
    }

    public void M04009() {
        updateRID(3, "9F0605A000000004DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220117DF050400000000DF040103", true);
    }

    public void M04010() {
        updateRID(0, VISA_RID, true);
    }

    public void M04011() {
        updateRID(4, VISA_RID, true);
    }

    public void M04012() {
        updateRID(1, null, true);
    }

    public void M04013() {
        updateRID(1, "", true);
    }

    public void M04014() {
        updateRID(2, null, true);
    }

    public void M04015() {
        updateRID(2, "", true);
    }

    public void M04016() {
        updateRID(3, null, true);
    }

    public void M04017() {
        updateRID(3, "", true);
    }

    public void M04018() {
        //DF05 00000000-20181231
        String MASTER_RID_change = "9F0605A000000004DF0314381A035DA58B482EE2AF75F4C3F2CA469BA4AA6CDF028190A6DA428387A502D7DDFB7A74D3F412BE762627197B25435B7A81716A700157DDD06F7CC99D6CA28C2470527E2C03616B9C59217357C2674F583B3BA5C7DCF2838692D023E3562420B4615C439CA97C44DC9A249CFCE7B3BFB22F68228C3AF13329AA4A613CF8DD853502373D62E49AB256D2BC17120E54AEDCED6D96A4287ACC5C04677D4A5A320DB8BEE2F775E5FEC59F220104DF0503311217DF040103";
        updateRID(1, MASTER_RID_change, true);
    }

    public void M04019() {
        //change 9F22
        String VISA_RID_wrong = "9F0605A000000003DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220108DF050400000000DF040103";
        updateRID(1, VISA_RID_wrong, true);
    }

    public void M04020() {
        int cnt = 100;
        String cakeystr;

        for (int i = 0; i < cnt; i++) {
            String str = "9F2201" + String.format("%02d", i);//两位数，不足位补0
            logUtils.addCaseLog("Public key index" + str);
            cakeystr = "9F0605A0000000039F220100DF060101DF070101DF028190BE9E1FA5E9A803852999C4AB432DB28600DCD9DAB76DFAAA47355A0FE37B1508AC6BF38860D3C6C2E5B12A3CAAF2A7005A7241EBAA7771112C74CF9A0634652FBCA0E5980C54A64761EA101A114E0F0B5572ADD57D010B7C9C887E104CA4EE1272DA66D997B9A90B5A6D624AB6C57E73C8F919000EB5F684898EF8C3DBEFB330C62660BED88EA78E909AFF05F6DA627BDF040103DF0314EE1511CEC71020A9B90443B37B1D5F6E703030F6DF050400000000";
            String cakeystr1 = cakeystr.replaceAll("9F220100", str);
            boolean ret = updateRID(1, cakeystr1, false);
            if (ret) {
                logUtils.addCaseLog("Public key index" + i + "add success");
            } else {
                logUtils.addCaseLog("Public key index" + i + "add failed");
            }
        }
    }

    public void M04021() {
        updateRID(1, "9F0605A000000003DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF0503311217DF040103", true);
    }

    public void M04022() {
        updateRID(1, "9F0605A000000003DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000003DF031420D213126955DE205ADC2FD2822BD22DE21CF9A8DF0281B0D9FD6ED75D51D0E30664BD157023EAA1FFA871E4DA65672B863D255E81E137A51DE4F72BCC9E44ACE12127F87E263D3AF9DD9CF35CA4A7B01E907000BA85D24954C2FCA3074825DDD4C0C8F186CB020F683E02F2DEAD3969133F06F7845166ACEB57CA0FC2603445469811D293BFEFBAFAB57631B3DD91E796BF850A25012F1AE38F05AA5C4D6D03B1DC2E568612785938BBC9B3CD3A910C1DA55A5A9218ACE0F7A21287752682F15832A678D6E1ED0B9F220108DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000003DF03141FF80A40173F52D7D27E0F26A146A1C8CCB29046DF0281F89D912248DE0A4E39C1A7DDE3F6D2588992C1A4095AFBD1824D1BA74847F2BC4926D2EFD904B4B54954CD189A54C5D1179654F8F9B0D2AB5F0357EB642FEDA95D3912C6576945FAB897E7062CAA44A4AA06B8FE6E3DBA18AF6AE3738E30429EE9BE03427C9D64F695FA8CAB4BFE376853EA34AD1D76BFCAD15908C077FFE6DC5521ECEF5D278A96E26F57359FFAEDA19434B937F1AD999DC5C41EB11935B44C18100E857F431A4A5A6BB65114F174C2D7B59FDF237D6BB1DD0916E644D709DED56481477C75D95CDD68254615F7740EC07F330AC5D67BCD75BF23D28A140826C026DBDE971A37CD3EF9B8DF644AC385010501EFC6509D7A419F220109DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000065DF0314C75E5210CBE6E8F0594A0F1911B07418CADB5BABDF02819099B63464EE0B4957E4FD23BF923D12B61469B8FFF8814346B2ED6A780F8988EA9CF0433BC1E655F05EFA66D0C98098F25B659D7A25B8478A36E489760D071F54CDF7416948ED733D816349DA2AADDA227EE45936203CBF628CD033AABA5E5A6E4AE37FBACB4611B4113ED427529C636F6C3304F8ABDD6D9AD660516AE87F7F2DDF1D2FA44C164727E56BBC9BA23C02859F220110DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000065DF0314874B379B7F607DC1CAF87A19E400B6A9E25163E8DF0281B0ADF05CD4C5B490B087C3467B0F3043750438848461288BFEFD6198DD576DC3AD7A7CFA07DBA128C247A8EAB30DC3A30B02FCD7F1C8167965463626FEFF8AB1AA61A4B9AEF09EE12B009842A1ABA01ADB4A2B170668781EC92B60F605FD12B2B2A6F1FE734BE510F60DC5D189E401451B62B4E06851EC20EBFF4522AACC2E9CDC89BC5D8CDE5D633CFD77220FF6BBD4A9B441473CC3C6FEFC8D13E57C3DE97E1269FA19F655215B23563ED1D1860D86819F220112DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000065DF0314C0D15F6CD957E491DB56DCDD1CA87A03EBE06B7BDF0281F8AEED55B9EE00E1ECEB045F61D2DA9A66AB637B43FB5CDBDB22A2FBB25BE061E937E38244EE5132F530144A3F268907D8FD648863F5A96FED7E42089E93457ADC0E1BC89C58A0DB72675FBC47FEE9FF33C16ADE6D341936B06B6A6F5EF6F66A4EDD981DF75DA8399C3053F430ECA342437C23AF423A211AC9F58EAF09B0F837DE9D86C7109DB1646561AA5AF0289AF5514AC64BC2D9D36A179BB8A7971E2BFA03A9E4B847FD3D63524D43A0E8003547B94A8A75E519DF3177D0A60BC0B4BAB1EA59A2CBB4D2D62354E926E9C7D3BE4181E81BA60F8285A896D17DA8C3242481B6C405769A39D547C74ED9FF95A70A796046B5EFF36682DC299F220114DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000065DF0314D9FD62C9DD4E6DE7741E9A17FB1FF2C5DB948BCBDF0281B0A2583AA40746E3A63C22478F576D1EFC5FB046135A6FC739E82B55035F71B09BEB566EDB9968DD649B94B6DEDC033899884E908C27BE1CD291E5436F762553297763DAA3B890D778C0F01E3344CECDFB3BA70D7E055B8C760D0179A403D6B55F2B3B083912B183ADB7927441BED3395A199EEFE0DEBD1F5FC3264033DA856F4A8B93916885BD42F9C1F456AAB8CFA83AC574833EB5E87BB9D4C006A4B5346BD9E17E139AB6552D9C58BC0411953364859F220111DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000004DF0314381A035DA58B482EE2AF75F4C3F2CA469BA4AA6CDF028190A6DA428387A502D7DDFB7A74D3F412BE762627197B25435B7A81716A700157DDD06F7CC99D6CA28C2470527E2C03616B9C59217357C2674F583B3BA5C7DCF2838692D023E3562420B4615C439CA97C44DC9A249CFCE7B3BFB22F68228C3AF13329AA4A613CF8DD853502373D62E49AB256D2BC17120E54AEDCED6D96A4287ACC5C04677D4A5A320DB8BEE2F775E5FEC59F220104DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000004DF0314EBFA0D5D06D8CE702DA3EAE890701D45E274C845DF0281B0B8048ABC30C90D976336543E3FD7091C8FE4800DF820ED55E7E94813ED00555B573FECA3D84AF6131A651D66CFF4284FB13B635EDD0EE40176D8BF04B7FD1C7BACF9AC7327DFAA8AA72D10DB3B8E70B2DDD811CB4196525EA386ACC33C0D9D4575916469C4E4F53E8E1C912CC618CB22DDE7C3568E90022E6BBA770202E4522A2DD623D180E215BD1D1507FE3DC90CA310D27B3EFCCD8F83DE3052CAD1E48938C68D095AAC91B5F37E28BB49EC7ED5979F220105DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000004DF0314F910A1504D5FFB793D94F3B500765E1ABCAD72D9DF0281F8CB26FC830B43785B2BCE37C81ED334622F9622F4C89AAE641046B2353433883F307FB7C974162DA72F7A4EC75D9D657336865B8D3023D3D645667625C9A07A6B7A137CF0C64198AE38FC238006FB2603F41F4F3BB9DA1347270F2F5D8C606E420958C5F7D50A71DE30142F70DE468889B5E3A08695B938A50FC980393A9CBCE44AD2D64F630BB33AD3F5F5FD495D31F37818C1D94071342E07F1BEC2194F6035BA5DED3936500EB82DFDA6E8AFB655B1EF3D0D7EBF86B66DD9F29F6B1D324FE8B26CE38AB2013DD13F611E7A594D675C4432350EA244CC34F3873CBA06592987A1D7E852ADC22EF5A2EE28132031E48F74037E3B34AB747F9F220106DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000333DF031403BB335A8549A03B87AB089D006F60852E4B8060DF028190A3767ABD1B6AA69D7F3FBF28C092DE9ED1E658BA5F0909AF7A1CCD907373B7210FDEB16287BA8E78E1529F443976FD27F991EC67D95E5F4E96B127CAB2396A94D6E45CDA44CA4C4867570D6B07542F8D4BF9FF97975DB9891515E66F525D2B3CBEB6D662BFB6C3F338E93B02142BFC44173A3764C56AADD202075B26DC2F9F7D7AE74BD7D00FD05EE430032663D27A579F220102DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000333DF031487F0CD7C0E86F38F89A66F8C47071A8B88586F26DF0281B0B0627DEE87864F9C18C13B9A1F025448BF13C58380C91F4CEBA9F9BCB214FF8414E9B59D6ABA10F941C7331768F47B2127907D857FA39AAF8CE02045DD01619D689EE731C551159BE7EB2D51A372FF56B556E5CB2FDE36E23073A44CA215D6C26CA68847B388E39520E0026E62294B557D6470440CA0AEFC9438C923AEC9B2098D6D3A1AF5E8B1DE36F4B53040109D89B77CAFAF70C26C601ABDF59EEC0FDC8A99089140CD2E817E335175B03B7AA33D9F220103DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000333DF0314F527081CF371DD7E1FD4FA414A665036E0F5E6E5DF0281F8BC853E6B5365E89E7EE9317C94B02D0ABB0DBD91C05A224A2554AA29ED9FCB9D86EB9CCBB322A57811F86188AAC7351C72BD9EF196C5A01ACEF7A4EB0D2AD63D9E6AC2E7836547CB1595C68BCBAFD0F6728760F3A7CA7B97301B7E0220184EFC4F653008D93CE098C0D93B45201096D1ADFF4CF1F9FC02AF759DA27CD6DFD6D789B099F16F378B6100334E63F3D35F3251A5EC78693731F5233519CDB380F5AB8C0F02728E91D469ABD0EAE0D93B1CC66CE127B29C7D77441A49D09FCA5D6D9762FC74C31BB506C8BAE3C79AD6C2578775B95956B5370D1D0519E37906B384736233251E8F09AD79DFBE2C6ABFADAC8E4D8624318C27DAF19F220104DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000025DF0314A7266ABAE64B42A3668851191D49856E17F8FBCDDF028190AA94A8C6DAD24F9BA56A27C09B01020819568B81A026BE9FD0A3416CA9A71166ED5084ED91CED47DD457DB7E6CBCD53E560BC5DF48ABC380993B6D549F5196CFA77DFB20A0296188E969A2772E8C4141665F8BB2516BA2C7B5FC91F8DA04E8D512EB0F6411516FB86FC021CE7E969DA94D33937909A53A57F907C40C22009DA7532CB3BE509AE173B39AD6A01BA5BB859F22010EDF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000025DF0314A73472B3AB557493A9BC2179CC8014053B12BAB4DF0281B0C8D5AC27A5E1FB89978C7C6479AF993AB3800EB243996FBB2AE26B67B23AC482C4B746005A51AFA7D2D83E894F591A2357B30F85B85627FF15DA12290F70F05766552BA11AD34B7109FA49DE29DCB0109670875A17EA95549E92347B948AA1F045756DE56B707E3863E59A6CBE99C1272EF65FB66CBB4CFF070F36029DD76218B21242645B51CA752AF37E70BE1A84FF31079DC0048E928883EC4FADD497A719385C2BBBEBC5A66AA5E5655D18034EC59F22010FDF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000025DF0314C729CF2FD262394ABC4CC173506502446AA9B9FDDF0281F8CF98DFEDB3D3727965EE7797723355E0751C81D2D3DF4D18EBAB9FB9D49F38C8C4A826B99DC9DEA3F01043D4BF22AC3550E2962A59639B1332156422F788B9C16D40135EFD1BA94147750575E636B6EBC618734C91C1D1BF3EDC2A46A43901668E0FFC136774080E888044F6A1E65DC9AAA8928DACBEB0DB55EA3514686C6A732CEF55EE27CF877F110652694A0E3484C855D882AE191674E25C296205BBB599455176FDD7BBC549F27BA5FE35336F7E29E68D783973199436633C67EE5A680F05160ED12D1665EC83D1997F10FD05BBDBF9433E8F797AEE3E9F02A34228ACE927ABE62B8B9281AD08D3DF5C7379685045D7BA5FCDE586379F220110DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000152DF031417F971CAF6B708E5B9165331FBA91593D0C0BF66DF0281B08EEEC0D6D3857FD558285E49B623B109E6774E06E9476FE1B2FB273685B5A235E955810ADDB5CDCC2CB6E1A97A07089D7FDE0A548BDC622145CA2DE3C73D6B14F284B3DC1FA056FC0FB2818BCD7C852F0C97963169F01483CE1A63F0BF899D412AB67C5BBDC8B4F6FB9ABB57E95125363DBD8F5EBAA9B74ADB93202050341833DEE8E38D28BD175C83A6EA720C262682BEABEA8E955FE67BD9C2EFF7CB9A9F45DD5BDA4A1EEFB148BC44FFF68D9329FD9F220104DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000152DF031412BCD407B6E627A750FDF629EE8C2C9CC7BA636ADF0281F8E1200E9F4428EB71A526D6BB44C957F18F27B20BACE978061CCEF23532DBEBFAF654A149701C14E6A2A7C2ECAC4C92135BE3E9258331DDB0967C3D1D375B996F25B77811CCCC06A153B4CE6990A51A0258EA8437EDBEB701CB1F335993E3F48458BC1194BAD29BF683D5F3ECB984E31B7B9D2F6D947B39DEDE0279EE45B47F2F3D4EEEF93F9261F8F5A571AFBFB569C150370A78F6683D687CB677777B2E7ABEFCFC8F5F93501736997E8310EE0FD87AFAC5DA772BA277F88B44459FCA563555017CD0D66771437F8B6608AA1A665F88D846403E4C41AFEEDB9729C2B2511CFE228B50C1B152B2A60BBF61D8913E086210023A3AA499E4239F220105DF0503123133DF040103DF070101DF060101", false);
        updateRID(1, "9F0605A000000025DF03148E8DFF443D78CD91DE88821D70C98F0638E51E49DF0281B0B362DB5733C15B8797B8ECEE55CB1A371F760E0BEDD3715BB270424FD4EA26062C38C3F4AAA3732A83D36EA8E9602F6683EECC6BAFF63DD2D49014BDE4D6D603CD744206B05B4BAD0C64C63AB3976B5C8CAAF8539549F5921C0B700D5B0F83C4E7E946068BAAAB5463544DB18C63801118F2182EFCC8A1E85E53C2A7AE839A5C6A3CABE73762B70D170AB64AFC6CA482944902611FB0061E09A67ACB77E493D998A0CCF93D81A4F6C0DC6B7DF22E62DB9F2201C9DF0503123133DF040103DF070101DF060101", false);

        My06getRID();
    }

    public void M04023() {
        updateRID(1, "9F0605A000000003DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF0503123133DF040103DF070101DF060101", true);
    }

    public void M04024() {
        updateRID(1, "9F0605A000000003DF03140000000000000000000000000000000000000000DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF0503123133DF040103DF070101DF060101", true);
    }

    public void M04025() {
        for (String rid : ridList) {
            updateRID(1, rid, true);
        }
    }

    public void M04026() {
//        增加AMEX 公钥C07
        updateRID(1, "9F2201C79F0605A000000025DF040103DF028190CD237E34E0299DE48F1A2C94F478FE972896011E1CA6AB462B68FE0F6109C9A97C2DBEEA65932CDE0625138B9F162B92979DAAB019D3B5561D31EB2D4F09F12F927EA8F740CE0E87154965505E2272F69042B15D57CCC7F771919123978283B3CCE524D9715207BF5F5AD369102176F0F7A78A6DEB2BFF0EDCE165F3B14F14D0035B2756861FE03C43396ED002C894A3DF03146221E0C726BAC8F8AC25F8F93B811D1FFD4C131CDF060101DF070101DF050420251231", true);
    }

    public void M05001() {
        My05getAID(1);
    }

    public void M05002() {
        My05getAID(2);
    }

    public void M05003() {
        My05getAID(1);
    }

    public void M05004() {
        My05getAID(2);
    }

    public void M05005() {
        My05getAID(1);
    }

    public void M05006() {
        My05getAID(2);
    }

    public void M05007() {
        My05getAID(0);
    }

    public void M05008() {
        My05getAID(3);
    }

    public void M06001() {
        My06getRID();
    }

    public void M06002() {
        My06getRID();
    }


public void M07001() {
        My07importAmount(1234);
    }

    public void M07002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess",false);
        startEmvData.putInt("cardType",0);
        startEmvData.putByte("transProcessCode",(byte)0x00);
        startEmvData.putLong("authAmount",0);
        startEmvData.putBoolean("isSupportSM",false);
        startEmvData.putBoolean("isForceOnline",false);
        startEmvData.putString("merchantName","Overseas version of Service test EMV process");
        startEmvData.putString("merchantId","123456789012345");
        startEmvData.putString("terminalId","12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M07003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess",false);
        startEmvData.putInt("cardType",0);
        startEmvData.putByte("transProcessCode",(byte)0x00);
        startEmvData.putLong("authAmount",1234);
        startEmvData.putBoolean("isSupportSM",false);
        startEmvData.putBoolean("isForceOnline",false);
        startEmvData.putString("merchantName","Overseas version of Service test EMV process");
        startEmvData.putString("merchantId","123456789012345");
        startEmvData.putString("terminalId","12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M07004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess",false);
        startEmvData.putInt("cardType",0);
        startEmvData.putByte("transProcessCode",(byte)0x00);
        startEmvData.putLong("authAmount",99999999);
        startEmvData.putBoolean("isSupportSM",false);
        startEmvData.putBoolean("isForceOnline",false);
        startEmvData.putString("merchantName","Overseas version of Service test EMV process");
        startEmvData.putString("merchantId","123456789012345");
        startEmvData.putString("terminalId","12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M07005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess",false);
        startEmvData.putInt("cardType",0);
        startEmvData.putByte("transProcessCode",(byte)0x00);
        startEmvData.putLong("authAmount",-1);
        startEmvData.putBoolean("isSupportSM",false);
        startEmvData.putBoolean("isForceOnline",false);
        startEmvData.putString("merchantName","Overseas version of Service test EMV process");
        startEmvData.putString("merchantId","123456789012345");
        startEmvData.putString("terminalId","12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M07006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess",false);
        startEmvData.putInt("cardType",1);
        startEmvData.putByte("transProcessCode",(byte)0x00);
        startEmvData.putLong("authAmount",3);
        startEmvData.putBoolean("isSupportSM",false);
        startEmvData.putBoolean("isForceOnline",false);
        startEmvData.putString("merchantName","Overseas version of Service test EMV process");
        startEmvData.putString("merchantId","123456789012345");
        startEmvData.putString("terminalId","12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }


    public void M08001() {
        My08importAppSelect(1);
    }

    public void M08002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", -1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", -1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 0);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 2);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 3);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M08009() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }


    public void M09001() {
        byte[] pin = "123456".getBytes();
        My09importPin(1, pin);
    }

    public void M09002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", -1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 2);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1600);//大于DF21
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", -1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09009() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 2);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09010() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "123456");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09011() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);//大于DF21的值，才能输密
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "123456");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09012() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09013() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09014() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09015() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09016() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09017() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09018() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09019() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09020() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09021() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09022() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09023() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09024() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09025() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09026() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09027() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09028() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09029() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09030() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", null);
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09031() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M09032() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "&……%￥#@");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }


    public void M09033() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isForceOnlineWhenInputPin", true);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M11001() {
        My11importCardConfirmResult(true);
    }

    public void M11002() {
        My11importCardConfirmResult(false);
    }

    public void M11003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M11004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M11005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M11006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12001() {
        Bundle onlineResult = new Bundle();
        onlineResult.putBoolean("isOnline", true);
        onlineResult.putString("respCode", "00");
        onlineResult.putString("authCode", "123456");
        onlineResult.putString("field55", "9F3602000291084CD9063B00860000");
        My12importOnlineResult(onlineResult, new MyOnlineResultHandler());
    }

    public void M12002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "09");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "01");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 2000000);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12007() {
        Bundle onlineResult = new Bundle();
        onlineResult.putBoolean("isOnline", true);
        onlineResult.putString("respCode", "00");
        onlineResult.putString("authCode", "123456");
        onlineResult.putString("field55", "9F3602000291084CD9063B00860000");
        My12importOnlineResult(onlineResult, null);
    }

    public void M12008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12009() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12010() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", null);
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12011() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", null);
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

    }

    public void M12012() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12013() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12014() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12015() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12016() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", null);
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12017() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12018() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", null);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12019() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", null);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12020() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12021() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12022() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12023() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "1234567890");
//        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M12024() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        importData.putString("field55", "1234567890");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");
        importData.putBoolean("getCDCVMTransactionMediumType", true);

        HashMap test = new HashMap<Integer, Integer>();
        test.put(2, 1);
        test.put(4, 1);
        test.put(5, 0);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");
        importData.putBoolean("getCDCVMTransactionMediumType", true);

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(0, startEmvData, new MyEmvHandler(importData));
    }

    public void M13008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(3, startEmvData, new MyEmvHandler(importData));
    }

    public void M13009() {
        Bundle importData = new Bundle();

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");
        try {
            iemv.startEMV(1, null, new MyEmvHandler(importData));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void M13010() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        My13startEMV(1, startEmvData, null);
    }

    public void M13011() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", null);
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13012() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13013() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", null);
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13014() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13015() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "12345678901234");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13016() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "1234567890123456");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13017() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", null);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13018() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13019() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "1234567");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13020() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "123456789");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13021() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", -1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13022() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 2);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13023() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0xFF);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13024() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13025() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13026() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x31);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13027() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x31);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13028() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x40);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13029() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x40);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13030() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x03);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13031() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x03);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13032() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13033() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13034() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13035() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13036() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13037() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13038() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x0B);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");
        importData.putString("getCardData", "StandardData");
        importData.putBoolean("isGetCardData", true);

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13039() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x0B);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");
        importData.putString("getCardData", "StandardData");//standarddatd就是四个tag：9F79、9F51,DF79,DF71
        importData.putBoolean("isGetCardData", true);
        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13040() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13041() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putInt("panConfirmTimeOut", 10);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13042() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putInt("panConfirmTimeOut", 0);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13043() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putInt("panConfirmTimeOut", -1);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13044() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13045() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putInt("appSelectTimeOut", 10);
        importData.putString("testAppSelectTimeOut", "10");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13046() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putInt("appSelectTimeOut", 0);
        importData.putString("testAppSelectTimeOut", "0");


        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13047() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putInt("appSelectTimeOut", -1);

        importData.putString("testAppSelectTimeOut", "-1");
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);


        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13048() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13049() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(2, startEmvData, new MyEmvHandler(importData));
    }

    public void M13050() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF812406000000150000DF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 149999);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13051() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF812406000000150000DF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 150001);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13052() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000150000DF812406000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 99999);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13053() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000150000DF812406000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 120000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13054() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF812406000000100000DF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 99999);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13055() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF812406000000100000DF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13056() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF812406000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 99999);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13057() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF812406000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13058() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 99999);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13059() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13060() {
        updateAID(1, 2, "9F0607A00000000310109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105DC4000A800DF812406000000150000DF2006000000100000DF1906000000000000DF21060000001500019F660433004000DF180101");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13061() {
        updateAID(1, 2, "9F0606A000000025019F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205DE00FC9800DF1105DC50fc9800DF812406000000150000DF2006000000100000DF1906000000000000DF21060000001500019F6604B6404280DF180101DF13050000000000");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 120000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13062() {
        updateAID(1, 2, "9F0608A0000003330101019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF812406000000150000DF2006000000100000DF1906000000000000DF21060000005000019F660436000000DF180101");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 120000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13063() {
        updateAID(1, 2, "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF130500000000009F2A0102");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }


    public void M13064() {
        updateAID(1, 2, "9F0606A000000025019F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205DE00FC9800DF1105DC50fc9800DF812406000000150000DF2006000000100000DF1906000000000000DF21060000001500019F6604B6404280DF180101DF130500000000009F2A0104");
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13065() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "10");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13066() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "87");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13067() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "10");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");
        importData.putBoolean("getCDCVMTransactionMediumType", false);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13068() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "87");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13069() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "11");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13070() {
        //enableFinalAppSelectCallback = true, 自定义金额，接触，案例对应13001
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putBoolean("enableFinalAppSelectCallback",true);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020764");
        emvData.add("9F0206000000000123");
//        importData.putStringArrayList("emvDataList", emvData);
//        try {
//            iemv.setFinalAppSelectCallBack(new MyFinalAppSelectHandler(emvData));
//        } catch (RemoteException e) {
//            throw new RuntimeException(e);
//        }

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13071() {
        //enableFinalAppSelectCallback = false, 自定义金额，接触，案例对应13001
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putBoolean("enableFinalAppSelectCallback",false);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020764");
        emvData.add("9F0206000000000234");
//        importData.putStringArrayList("emvDataList", emvData);


        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13072() {
        //enableFinalAppSelectCallback = true, 自定义金额， 非接，案例对应13002

        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putBoolean("enableFinalAppSelectCallback",true);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0208409F0206000000004567");
        importData.putBoolean("getCDCVMTransactionMediumType", true);

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000004567");
//        importData.putStringArrayList("emvDataList", emvData);


        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }


    public void M13073() {
        //enableFinalAppSelectCallback = false, 自定义金额， 非接，案例对应13002

        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putBoolean("enableFinalAppSelectCallback",false);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0208409F0206000000004567");
        importData.putBoolean("getCDCVMTransactionMediumType", true);

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000004568");

//        importData.putStringArrayList("emvDataList", emvData);


        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M13074() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        importData.putBoolean("needStopCheckCard", true);
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

    }

    public void M13075() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");
        startEmvData.putBoolean("enableX990Transmit",true);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M14001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M14002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M14003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M14004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("cancelEmvWhenInputPin", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M14005() {
        My14abortEMV();
    }

    public void M14006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("cancelSelectApplication", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M15001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isGetCardData", true);
        importData.putString("getCardData", "StandardData");

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
//        My15getCardData("9F26");
    }

    public void M15002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isGetCardData", true);
        importData.putString("getCardData", "StandardData");

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M15003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isGetCardData", true);
        importData.putString("getCardData", "StandardData");

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M15004() {
        My15getCardData("9F51");
        My15getCardData("9F79");
        My15getCardData("DF71");
        My15getCardData("DF79");
        My15getCardData("8E");
    }

    public void M15005() {
        My15getCardData(null);
    }

    public void M15006() {
        My15getCardData("");
    }

    public void M15007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isGetCardData", true);
        importData.putString("getCardData", "StandardData");

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M15008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isGetCardData", true);
        importData.putString("getCardData", "StandardData");

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M16001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000000123");

        importData.putStringArrayList("emvDataList", emvData);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M16002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602114B950580800080009A0323");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020764");
        emvData.add("9F020600000000015F");

        importData.putStringArrayList("emvDataList", emvData);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    private byte[] asc2Bcd(String s) {
        return new byte[0];
    }


    public void M16003() {


        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        ArrayList tlvList = new ArrayList<String>();
        tlvList.add("abcdefg");
        tlvList.add("hijklmn");
        tlvList.add("opqrsl");
        tlvList.add("QWERTY%");
        tlvList.add("&^%RTFF");

        importData.putStringArrayList("emvDataList", tlvList);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M16004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        ArrayList<String> tlvList = new ArrayList<String>();

        importData.putStringArrayList("emvDataList", tlvList);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

    }

    public void M16005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        importData.putBoolean("emptyEmvData", true);


        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

    }

    public void M16006() {

        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        byte[] acquirerID = {(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x06};
        byte[] termCap = {(byte) 0xe0, (byte) 0xf1, (byte) 0xc9};
        byte[] addTermCap = {(byte) 0xe0, (byte) 0x00, (byte) 0xF0, (byte) 0xA0, (byte) 0x02};
        byte[] countryCode = {(byte) 0x01, (byte) 0x57};
        byte[] currencyCode = {(byte) 0x01, (byte) 0x58};
        byte[] termType = {(byte) 0x23};

        ArrayList<String> tlvList = new ArrayList<String>();

        tlvList.add(byte2HexStr(asc2Bcd("9F160F")) + byte2HexStr("123456789012347".getBytes()));
        tlvList.add(byte2HexStr(asc2Bcd("9F4E0D")) + byte2HexStr("Verifone TesT".getBytes()));
        tlvList.add(byte2HexStr(asc2Bcd("9F1C08")) + byte2HexStr("12345679".getBytes()));
        tlvList.add("");
        tlvList.add(byte2HexStr(asc2Bcd("9F1E08")) + byte2HexStr("50342028".getBytes()));
        tlvList.add(byte2HexStr(asc2Bcd("9F3501")) + byte2HexStr(termType));
        tlvList.add(byte2HexStr(asc2Bcd("9F3303")) + byte2HexStr(termCap));
        tlvList.add("");
        tlvList.add(byte2HexStr(asc2Bcd("9F1A02")) + byte2HexStr(countryCode));
        tlvList.add(byte2HexStr(asc2Bcd("5F2A02")) + byte2HexStr(currencyCode));

        importData.putStringArrayList("emvDataList", tlvList);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));


        My16setEMVData(tlvList);
    }

    public void M16007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        byte[] acquirerID = {(byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x06};
        byte[] termCap = {(byte) 0xe0, (byte) 0xf1, (byte) 0xc9};
        byte[] addTermCap = {(byte) 0xe0, (byte) 0x00, (byte) 0xF0, (byte) 0xA0, (byte) 0x02};
        byte[] countryCode = {(byte) 0x01, (byte) 0x57};
        byte[] currencyCode = {(byte) 0x01, (byte) 0x58};
        byte[] termType = {(byte) 0x23};

        ArrayList<String> tlvList = new ArrayList<String>();

        tlvList.add(byte2HexStr(asc2Bcd("9F160F")) + byte2HexStr("123456789012347".getBytes()));
        tlvList.add(byte2HexStr(asc2Bcd("9F4E0D")) + byte2HexStr("Verifone TesT".getBytes()));
        tlvList.add(byte2HexStr(asc2Bcd("9F1C08")) + byte2HexStr("12345679".getBytes()));
        tlvList.add(null);
        tlvList.add(byte2HexStr(asc2Bcd("9F1E08")) + byte2HexStr("50342028".getBytes()));
        tlvList.add(byte2HexStr(asc2Bcd("9F3501")) + byte2HexStr(termType));
        tlvList.add(byte2HexStr(asc2Bcd("9F3303")) + byte2HexStr(termCap));
        tlvList.add(null);
        tlvList.add(byte2HexStr(asc2Bcd("9F1A02")) + byte2HexStr(countryCode));
        tlvList.add(byte2HexStr(asc2Bcd("5F2A02")) + byte2HexStr(currencyCode));

        importData.putStringArrayList("emvDataList", tlvList);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

    }

    public void M16008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("issetEMVdata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M16009() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("issetEMVdata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000004567");

        importData.putStringArrayList("emvDataList", emvData);

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M17001() {

 Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess",true);
        startEmvData.putInt("cardType",0);
        startEmvData.putByte("transProcessCode",(byte)0x00);
        startEmvData.putLong("authAmount",1);
        startEmvData.putBoolean("isSupportSM",true);
        startEmvData.putBoolean("isForceOnline",false);
        startEmvData.putString("merchantName","Overseas version of Service test EMV process");
        startEmvData.putString("merchantId","123456789012345");
        startEmvData.putString("terminalId","12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline",true);
        importData.putString("respCode","00");
        importData.putString("authCode","123456");
        //插外卡返回的55域
        importData.putString("field55","9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

        String[] taglist = {"9F26","9F27","9F10","9F37","9F1A","9F36","95","9A","9C","9F02","5F2A","82","9F03","9F33","9F34","9F35","84","9F1E","9F09","9F41","8E","9F63"};

        My17getAppTLVList(taglist);
    }

    public void M17002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
//        String[] taglist = {"9F26","9F27","9F10","9F37","9F1A","9F36","95","9A","9C","9F02","5F2A","82","9F03","9F33","9F34","9F35","84","9F1E","9F09","9F41","8E","9F63"};
//
//        My17getAppTLVList(taglist);
    }

    public void M17003() {
//        Bundle startEmvData = new Bundle();
//        Bundle importData = new Bundle();
//
//        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
//        startEmvData.putInt("cardType", 0);
//        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 1);
//        startEmvData.putBoolean("isSupportSM", true);
//        startEmvData.putBoolean("isForceOnline", false);
//        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
//        startEmvData.putString("merchantId", "123456789012345");
//        startEmvData.putString("terminalId", "12345678");
//
//        importData.putInt("IsPinInput", 1);
//        importData.putString("importPIN", "9876");
//        importData.putBoolean("cancelCardConfirmResult", false);
//        importData.putBoolean("getAppTLVListOption", true);
//
//        importData.putBoolean("isOnline", true);
//        importData.putString("respCode", "00");
//        importData.putString("authCode", "123456");
//        //插外卡返回的55域
//        importData.putString("field55", "9F3602000291084CD9063B00860000");
//
//        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
        String[] taglist = {"93","86"};

        My17getAppTLVList(taglist);
    }

    public void M17004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

        String[] taglist = {"abcdedfsfsdfsdfs2134234234sdfsdfsdfws！@#￥ 捏\"囧槑（mei）"};

        My17getAppTLVList(taglist);
    }

    public void M17005() {
//        Bundle startEmvData = new Bundle();
//        Bundle importData = new Bundle();
//
//        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
//        startEmvData.putInt("cardType", 0);
//        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 1);
//        startEmvData.putBoolean("isSupportSM", true);
//        startEmvData.putBoolean("isForceOnline", false);
//        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
//        startEmvData.putString("merchantId", "123456789012345");
//        startEmvData.putString("terminalId", "12345678");
//
//        importData.putInt("IsPinInput", 1);
//        importData.putString("importPIN", "9876");
//        importData.putBoolean("cancelCardConfirmResult", false);
//        importData.putBoolean("getAppTLVListOption", true);
//
//        importData.putBoolean("isOnline", true);
//        importData.putString("respCode", "00");
//        importData.putString("authCode", "123456");
//        //插外卡返回的55域
//        importData.putString("field55", "9F3602000291084CD9063B00860000");
//
//        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
        String[] taglist = new String[]{};

        My17getAppTLVList(taglist);
    }

    public void M17006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
        String[] taglist = null;

        My17getAppTLVList(taglist);
    }

    public void M17007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
        String[] taglist = {"11"};

        My17getAppTLVList(taglist);
    }

    public void M17008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
        String[] taglist = {"9F26",""};

        My17getAppTLVList(taglist);
    }

    public void M17009() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M17010() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
        String[] taglist = {"9F26","11"};

        My17getAppTLVList(taglist);
    }

    public void M18001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M18002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M18003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M18004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M18005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19009() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19010() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M19011() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isgetProcessCardType", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M20001() {
        My20registerKernelAID(null);
    }

    public void M20002() {
        Map<String, Integer> customAidList = new HashMap<String, Integer>();
        customAidList.put("A0000006150001", CTLSKernelID.CTLS_KERNEL_ID_PURE);
//        customAidList.put(VISA_ctls_AID, CTLSKernelID.CTLS_KERNEL_ID_01_VISA);
//        customAidList.put(MASTER_ctls_AID, CTLSKernelID.CTLS_KERNEL_ID_02_MASTER);
//        customAidList.put(JCB_ctls_AID, CTLSKernelID.CTLS_KERNEL_ID_05_JCB);
//        customAidList.put(UNIONPAY_AID, CTLSKernelID.CTLS_KERNEL_ID_07_UNIONPAY);
        My20registerKernelAID(customAidList);
        M13001();
    }

    public void M20003() {
        Map<String, Integer> customAidList = new HashMap<String, Integer>();
        customAidList.put("A0000006150001", CTLSKernelID.CTLS_KERNEL_ID_01_VISA);
        My20registerKernelAID(customAidList);
        M13001();
    }

    public void M21001() {
        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("2340");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }

    public void M21002() {
        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000001");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000010");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100001");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }

    public void M21003() {
        byte[] drlID = BCDDecode.str2Bcd("02");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }

    public void M21004() {
        byte[] drlID = BCDDecode.str2Bcd("03");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }

    public void M21005() {
        byte[] drlID = BCDDecode.str2Bcd("02");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(2, drlData);
    }

    public void M21006() {
        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(0, drlData);
    }

    public void M21007() {
        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(3, drlData);
    }

    public void M21008() {
        My21updateVisaAPID(1, null);
    }

    public void M21009() {
        DRLData drlData = new DRLData(null, null, null, null);
        My21updateVisaAPID(1, drlData);
    }

    public void M21010() {
        byte[] drlID = new byte[]{};
        byte[] clssFloorLimit = new byte[]{};
        byte[] clssTransLimit = new byte[]{};
        byte[] cvmRequiredLimit = new byte[]{};
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }

    public void M21011() {
        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, null, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }

    public void M21012() {
        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        byte[] clssTransLimit = new byte[]{};
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
    }


    //使用EP097 设置AMEX DRL ID=11 预期为联机
    public void M21013() {

        //AMEX规范要求必须先设置DEFAULT
        byte[] drlID = new byte[16];
        Arrays.fill(drlID, (byte) 0xFF);
        byte[] clssTransLimit = new byte[]{0, 0, 0, 0, 21, 1};//0x15
        byte[] cvmRequiredLimit = new byte[]{0, 0, 0, 0, 16, 0};//0x10
        byte[] clssFloorLimit = new byte[]{0, 0, 0, 0, 18, 0};//0x12
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);

        drlID = new byte[]{0x0B};
        clssFloorLimit = BCDDecode.str2Bcd("000000000000");
        clssTransLimit = BCDDecode.str2Bcd("999999999999");
        cvmRequiredLimit = BCDDecode.str2Bcd("000000150001");
        drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
        M13002();
    }

    //使用EP097 设置AMEX DRL ID=11  预期为脱机
    public void M21014() {


        //AMEX规范要求必须先设置DEFAULT
        byte[] drlID = new byte[16];
        Arrays.fill(drlID, (byte) 0xFF);
        byte[] clssTransLimit = new byte[]{0, 0, 0, 0, 21, 1};//0x15
        byte[] cvmRequiredLimit = new byte[]{0, 0, 0, 0, 16, 0};//0x10
        byte[] clssFloorLimit = new byte[]{0, 0, 0, 0, 18, 0};//0x12
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);

        drlID = new byte[]{0x0B};
        clssFloorLimit = BCDDecode.str2Bcd("000000010000");
        clssTransLimit = BCDDecode.str2Bcd("999999999999");
        cvmRequiredLimit = BCDDecode.str2Bcd("000000150001");
        drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);
        My21updateVisaAPID(1, drlData);
        M13002();
    }

    public void M22001() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 1);
    }

    public void M22002() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 2);
    }

    public void M22003() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 01;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 1);
    }

    public void M22004() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 1);

        byte[] cardblk_2 = BCDDecode.str2Bcd("6231560600999271");
        byte sn_2 = (byte) 00;
        BLKData blkData_2 = new BLKData(cardblk_2, sn_2);
        My22updateCardBlk(1, blkData_2, 1);
    }

    public void M22005() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 2);

        byte[] cardblk_2 = BCDDecode.str2Bcd("6231560600999271");
        byte sn_2 = (byte) 00;
        BLKData blkData_2 = new BLKData(cardblk_2, sn_2);
        My22updateCardBlk(1, blkData_2, 2);
    }

    public void M22006() {
//        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte[] cardblk = BCDDecode.str2Bcd("5236497910186611");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(2, blkData, 1);
    }

    public void M22007() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(2, blkData, 2);
    }

    public void M22008() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(0, blkData, 1);
    }

    public void M22009() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(3, blkData, 1);
    }

    public void M22010() {
        My22updateCardBlk(1, null, 1);
    }


    public void M22011() {
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(null, sn);
        My22updateCardBlk(1, blkData, 1);
    }

    public void M22012() {
        byte[] cardblk = new byte[]{};
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 1);
    }

    public void M22013() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 0);
    }

    public void M22014() {
        byte[] cardblk = BCDDecode.str2Bcd("6228480039042651172");
        byte sn = (byte) 00;
        BLKData blkData = new BLKData(cardblk, sn);
        My22updateCardBlk(1, blkData, 3);
    }

    public void M23001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("isForceOnlineWhenCardConfirm", true);
        importData.putString("respCode", "00");
        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }

    public void M23002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putBoolean("isForceOnlineWhenCardConfirm", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));
    }


    public void M23003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putBoolean("isForceOnlineWhenInputPin", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        My13startEMV(1, startEmvData, new MyEmvHandler(importData));

    }


    public void M24001() {


        My24getCAPK();

    }

    public void M24002() {

        My24getCAPK();

    }

    public void M24003() {


        My24getCAPK();

    }

    public void M25001() {
        M01001();
        My25enableTrack(1);

    }

    public void M25002() {
        M01001();
        My25enableTrack(2);

    }

    public void M25003() {
        M01001();
        My25enableTrack(4);

    }

    public void M25004() {
        M01001();
        My25enableTrack(3);

    }

    public void M25005() {
        M01001();
        My25enableTrack(5);

    }

    public void M25006() {
        M01001();
        My25enableTrack(6);

    }

    public void M25007() {
        M01001();
        My25enableTrack(7);

    }

    public void M25008() {
        M01001();
        My25enableTrack(8);

    }

    public void M25009() {
        M01001();
        My25enableTrack(0);
    }


    public void M26001() {

        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());

    }

    public void M26002() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", false);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26003() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", false);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26004() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26005() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", false);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26006() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26007() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26008() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", false);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26009() {
        My26checkCardMs(null, 30000, new MyListener());
    }

    public void M26010() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, null);
    }

    public void M26011() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26012() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 0, new MyListener());
    }

    public void M26013() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, -1, new MyListener());
    }

    public void M26014() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 301000, new MyListener());
    }

    public void M26015() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 300000, new MyListener());
    }

    public void M26016() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26017() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26018() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26019() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }

    public void M26020() {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My26checkCardMs(cardOption, 30000, new MyListener());
    }


    // 新增获取内核案例
    public void M30001() {
        My30getCtlsSpecVer();
    }


    //setByPassAllPin=true
    public void M31001() {
        My31byPassPin(true);
        M13001();
    }

    //setByPassAllPin=false
    public void M31002() {
        My31byPassPin(false);
        M13001();
    }

    // AC TYPE  0-AAC
    public void M32001() {
        int acType = 0;
        My32setAcType(new MyAcTypeCallback(acType));
        M13001();
    }

    // AC TYPE   1-ARQC
    public void M32002() {
        int acType = 1;
        My32setAcType(new MyAcTypeCallback(acType));
        M13001();
    }

    // AC TYPE  2-TC
    public void M32003() {
        int acType = 2;
        My32setAcType(new MyAcTypeCallback(acType));
        M13001();
    }

    public void M33001() {
        My33setIssuerUpdate(new MyIssuerUpdateCallback());
        M13002();
    }

    public void M34001() {
        // update AID/CAPK/DRL parameter

        int operation = 1;
        int paramType = 1;
        String param = VISA_AID;

        byte[] drlID = BCDDecode.str2Bcd("01");
        byte[] clssFloorLimit = BCDDecode.str2Bcd("2340");
        byte[] clssTransLimit = BCDDecode.str2Bcd("000000000000");
        byte[] cvmRequiredLimit = BCDDecode.str2Bcd("000000100000");
        DRLData drlData = new DRLData(drlID, clssFloorLimit, clssTransLimit, cvmRequiredLimit);

        Bundle bundle = new Bundle();
        bundle.putString("groupName", "groupName");
        bundle.putParcelable("DRLData", drlData);
        My34updateGroupParam(operation, paramType, param, bundle);
    }




    private class MyIssuerUpdateCallback extends IssuerUpdateHandler.Stub {

        @Override
        public void onRequestIssuerUpdate() throws RemoteException {
            logUtils.addCaseLog("onRequestIssuerUpdate do second Tap.");
            //增加2S睡眠时间，给应用2次拍卡
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            M01021();
//            Bundle cardOption = new Bundle();
//            cardOption.putBoolean("supportMagCard", true);
//            cardOption.putBoolean("supportSmartCard", true);
//            cardOption.putBoolean("supportCTLSCard", true);
//            iemv.checkCard(cardOption, 60, new CheckCardListener.Stub() {
//                @Override
//                public void onCardSwiped(Bundle track) throws RemoteException {
//
//                }
//
//                @Override
//                public void onCardPowerUp() throws RemoteException {
//                    logUtils.addCaseLog("setIssuerUpdateScript");
//                    iemv.setIssuerUpdateScript();
//                }
//
//                @Override
//                public void onCardActivate() throws RemoteException {
//                    logUtils.addCaseLog("setIssuerUpdateScript");
//                    iemv.setIssuerUpdateScript();
//                }
//
//                @Override
//                public void onTimeout() throws RemoteException {
//
//                }
//
//                @Override
//                public void onError(int error, String message) throws RemoteException {
//
//                }
//
//                @Override
//                public IBinder asBinder() {
//                    return null;
//                }
//            });
        }
    }

    private class MyAcTypeCallback extends RequestACTypeHandler.Stub {
        private int type;

        public MyAcTypeCallback(int type) {
            this.type = type;
        }

        @Override
        public void requestConfirmACType(String aid, int defaultACType) throws RemoteException {
            logUtils.addCaseLog("requestConfirmACType aid=" + aid + ",defaultACType = " + defaultACType);
            logUtils.addCaseLog("setRequestACType:" + type);
            iemv.setRequestACType(type);
        }

    }


    private class MyListener extends CheckCardListener.Stub {
        String msg;
        long startTime = System.currentTimeMillis();
        boolean needSecondTapScript = false;

        public MyListener() {
        }

        public MyListener(boolean needSecondTapScript) {
            this.needSecondTapScript = needSecondTapScript;
        }

        @Override
        public void onCardActivate() throws RemoteException {
            msg = "Card test: successfully waved the card";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onCardActivate execute Time" + (endTime - startTime));
//            My28turnOff(1);
            if (needSecondTapScript) {
                iemv.setIssuerUpdateScript();
            }
        }

        @Override
        public void onCardSwiped(Bundle track) throws RemoteException {
            msg = "PAN:" + track.getString("PAN") + "\nTRACK1:" + track.getString("TRACK1") + "\nTRACK2:" + track.getString("TRACK2") + "\nTRACK3:" + track.getString("TRACK3") + "\nSERVICE_CODE:" + track.getString("SERVICE_CODE") + "\nEXPIRED_DATE:" + track.getString("EXPIRED_DATE");
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onCardSwiped execute Time" + (endTime - startTime));
//            My28turnOff(1);
        }

        @Override
        public void onCardPowerUp() throws RemoteException {
//            ((MyApplication) context).serviceMoudle.getBeerMoudle().B01006();
            msg = "Card test: IC card inserted successfully";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onCardPowerUp execute Time" + (endTime - startTime));
        }

        @Override
        public void onTimeout() throws RemoteException {
            msg = "Card detection: timeout";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onTimeout execute Time" + (endTime - startTime));
        }

        @Override
        public void onError(int error, String message) throws RemoteException {
            msg = "Check card error code = " + error + " " + message;
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onError execute Time" + (endTime - startTime));
        }
    }

    class MyOnlineResultHandler extends OnlineResultHandler.Stub {

        @Override
        public void onProccessResult(int result, Bundle data) throws RemoteException {
            logUtils.addCaseLog("\nOnProcessResult online post processing function");

            String str = "Online results callback, RESULT:" + result + "\nTC_DATA:" + data.getString("TC_DATA") + "\n" + "SCRIPT_DATA:" + data.getString("SCRIPT_DATA") + "\n" + "REVERSAL_DATA:" + data.getString("REVERSAL_DATA");
            Message message = new Message();
            message.getData().putString("message", str);
            handler.sendMessage(message);
        }
    }




    public ArrayList<String> getApiList() {
        return apiList;
    }

    public ArrayList<ArrayList<String>> getCaseNames() {
        return caseNames;
    }

    public void runTheMethod(int groupPosition, int childPosition) {
        String name = caseNames.get(groupPosition).get(childPosition);
        logUtils.clearLog();
        try {
            Class aClass = Class.forName("moudles.EmvMoudle");
            Method method = aClass.getMethod(name);
            method.invoke(this);
            logUtils.addCaseLog(name + "Case execute completed");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void showTheCaseInfo(int groupPosition, int childPosition) {
        String name = caseNames.get(groupPosition).get(childPosition);
        logUtils.printCaseInfo(name);
    }
}