package moudles;

import android.app.Activity;
import android.content.Context;

import com.laikey.jatools.Utils;
import com.verifone.smartpos.utils.BCDDecode;
import com.verifone.smartpos.utils.StringUtil;
import com.verifone.smartpos.utils.TlvUtil;
import com.dreamtek.smartpos.deviceservice.aidl.EMVHandler;
import com.dreamtek.smartpos.deviceservice.aidl.IEMV;
import com.dreamtek.smartpos.deviceservice.aidl.IPinpad;
import com.dreamtek.smartpos.deviceservice.aidl.IssuerUpdateHandler;
import com.dreamtek.smartpos.deviceservice.aidl.OnlineResultHandler;
import com.dreamtek.smartpos.deviceservice.aidl.RequestACTypeHandler;
import com.dreamtek.smartpos.deviceservice.aidl.key_manager.IDukpt;
import com.dreamtek.smartpos.deviceservice.aidl.sde.CardDetectionListener;
import com.dreamtek.smartpos.deviceservice.aidl.sde.ISde;
import com.dreamtek.smartpos.deviceservice.aidl.sde.SecurityPinInputListener;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.RemoteException;
import android.util.Log;


import Utils.LogUtils;
import base.MyApplication;
import entity.cases.KeyBoardDatas;
import testtools.ToastUtil;
import view.PinInputActivity;
import view.SecurityKeyboardActivity;

import static android.content.ContentValues.TAG;
import static moudles.DukptMoudle.getRandomString;

public class SdeMoudle {
    Context context;
    ISde iSde;
    IDukpt iDukpt;
    IEMV iEmv;
    IPinpad iPinpad;
    LogUtils logUtils;
    ArrayList<String> apiList = new ArrayList<String>();
    ArrayList<ArrayList<String>> caseNames = new ArrayList<ArrayList<String>>();
    ArrayList<String> setEncryptDataKey = new ArrayList<>();//设置加密数据秘钥
    ArrayList<String> getEncryptedMsgData = new ArrayList<>();//敏感数据计算
    ArrayList<String> cardDetection = new ArrayList<>();
    ArrayList<String> setObfuscatedPanNum = new ArrayList<>();
    ArrayList<String> getEncryptedData = new ArrayList<>();
    ArrayList<String> initSecurityKeyBoardView = new ArrayList<>();
    ArrayList<String> startSecurityKeyBoardEntry = new ArrayList<>();
    ArrayList<String> initPinInputView = new ArrayList<>();
    ArrayList<String> startPinpad = new ArrayList<>();
    ArrayList<String> cleanSensitiveData = new ArrayList<>();
    ArrayList<String> getSDEVer = new ArrayList<>();
    ArrayList<String> loadDukptKey = new ArrayList<>();
    ArrayList<String> startEMV = new ArrayList<>();
    ArrayList<String> abortEMV = new ArrayList<String>();
    ArrayList<String> importAppSelection = new ArrayList<String>();
    ArrayList<String> importPin = new ArrayList<String>();
    ArrayList<String> importCardConfirmResult = new ArrayList<String>();
    ArrayList<String> importOnlineResult = new ArrayList<String>();
    ArrayList<String> setEMVData = new ArrayList<String>();
    ArrayList<String> getAppTLVList = new ArrayList<String>();
    ArrayList<String> getEMVData = new ArrayList<String>();
    ArrayList<String> registerKernelAID = new ArrayList<String>();
    ArrayList<String> emvProcessingRequestOnline = new ArrayList<>();
    ArrayList<String> enableTrack = new ArrayList<String>();
    ArrayList<String> byPassPin = new ArrayList<String>();
    ArrayList<String> setAcType = new ArrayList<String>();


    private String dukptKey = getRandomString(32); // IPEK
    //    private String dukptKey = "6AC292FAA1315B4D858AB3A3D7D5933B";
    private String ksn = "FFFF9876543210E00000";
    private String ksnAES = "1280000F9876541280E00000";
    boolean verifyResult = false;


    public SdeMoudle(Context context, ISde iSde, IEMV iemv, IDukpt iDukpt, IPinpad iPinpad) {
        this.context = context;
        logUtils = MyApplication.serviceMoudle.logUtils;
        this.iSde = iSde;
        this.iEmv = iemv;
        this.iDukpt = iDukpt;
        this.iPinpad = iPinpad;
        try {
            Log.d(TAG,"sde version="+iSde.getSDEVer());
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        addAllapi();
    }

    String pinBlock1,ksn1;
    boolean isByPass1,isEncrypt1;
    public SdeMoudle(String pinBlock, String ksn, boolean isByPass, boolean isEncrypt){
        pinBlock1 = pinBlock;
        ksn1 = ksn;
        isByPass1 = isByPass;
        isEncrypt1 = isEncrypt;
    }

    private void addAllapi() {
        try {
            Class aClass = Class.forName("moudles.SdeMoudle");
            Method[] methods = aClass.getDeclaredMethods();
            for (Method i : methods) {
                if (i.getName().startsWith("My")) {
                    apiList.add(i.getName().replace("My", ""));
                } else {
                    switch (i.getName().substring(0, 3)) {
                        case "Q01":
                            setEncryptDataKey.add(i.getName());
                            break;
                        case "Q02":
                            getEncryptedMsgData.add(i.getName());
                            break;
                        case "Q03":
                            cardDetection.add(i.getName());
                            break;
                        case "Q04":
                            setObfuscatedPanNum.add(i.getName());
                            break;
                        case "Q05":
                            getEncryptedData.add(i.getName());
                            break;
                        case "Q06":
                            initSecurityKeyBoardView.add(i.getName());
                            break;
                        case "Q07":
                            startSecurityKeyBoardEntry.add(i.getName());
                            break;
                        case "Q08":
                            initPinInputView.add(i.getName());
                            break;
                        case "Q09":
                            startPinpad.add(i.getName());
                            break;
                        case "Q10":
                            cleanSensitiveData.add(i.getName());
                            break;
                        case "Q11":
                            getSDEVer.add(i.getName());
                            break;
                        case "Q12":
                            loadDukptKey.add(i.getName());
                            break;
                        case "Q13":
                            startEMV.add(i.getName());
                            break;
                        case "Q14":
                            abortEMV.add(i.getName());
                            break;
                        case "Q15":
                            importAppSelection.add(i.getName());
                            break;
                        case "Q16":
                            importPin.add(i.getName());
                            break;
                        case "Q17":
                            importCardConfirmResult.add(i.getName());
                            break;
                        case "Q18":
                            importOnlineResult.add(i.getName());
                            break;
                        case "Q19":
                            setEMVData.add(i.getName());
                            break;
                        case "Q20":
                            getAppTLVList.add(i.getName());
                            break;
                        case "Q21":
                            getEMVData.add(i.getName());
                            break;
                        case "Q22":
                            registerKernelAID.add(i.getName());
                            break;
                        case "Q23":
                            emvProcessingRequestOnline.add(i.getName());
                            break;
                        case "Q24":
                            enableTrack.add(i.getName());
                            break;
                        case "Q25":
                            byPassPin.add(i.getName());
                            break;
                        case "Q26":
                            setAcType.add(i.getName());
                            break;
                    }
                }
            }
            caseNames.add(setEncryptDataKey);
            caseNames.add(getEncryptedMsgData);
            caseNames.add(cardDetection);
            caseNames.add(setObfuscatedPanNum);
            caseNames.add(getEncryptedData);
            caseNames.add(initSecurityKeyBoardView);
            caseNames.add(startSecurityKeyBoardEntry);
            caseNames.add(initPinInputView);
            caseNames.add(startPinpad);
            caseNames.add(cleanSensitiveData);
            caseNames.add(getSDEVer);
            caseNames.add(loadDukptKey);
            caseNames.add(startEMV);
            caseNames.add(abortEMV);
            caseNames.add(importAppSelection);
            caseNames.add(importPin);
            caseNames.add(importCardConfirmResult);
            caseNames.add(importOnlineResult);
            caseNames.add(setEMVData);
            caseNames.add(getAppTLVList);
            caseNames.add(getEMVData);
            caseNames.add(registerKernelAID);
            caseNames.add(emvProcessingRequestOnline);
            caseNames.add(enableTrack);
            caseNames.add(byPassPin);
            caseNames.add(setAcType);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            logUtils.addCaseLog(msg.getData().getString("message"));
            logUtils.showCaseLog();
        }
    };

    String VISA_ctls_AID = "9F0607A00000000310109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105DC4000A800DF2006000000100000DF1906000000000000DF21060000001500019F660433004000DF180101";
    String VISA_AID = "9F0607A00000000310109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150220209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A001DF13050010000000DF1205DC4004F800DF1105DC4000A800";
    String MASTER_ctls_AID = "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205F45084800CDF1105F45084800CDF2006000000100000DF811801B8DF811E01009F1D082CE2000000000000DF81190108DF811B0130DF1906000000000000DF21060000001500009F6604A2000000DF180101DF13050000000000";
    String MASTER_AID = "9F0607A00000000410109F09020002DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A001DF13050000000000DF1205FE50B8F800DF1105FE50B8A000DF180101";
    String JCB_ctls_AID = "9F0607A00000006510109F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205FC60ACF800DF1105FC6024A800DF2006999999999999DF1906000000000000DF21060000001500019F6604A2000000DF180101";
    String JCB_AID = "9F0607A00000006510109F09020200DF0101009F1B0400000000DF150400000000DF170110DF16013097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A001DF13050010000000DF1205FC60ACF800DF1105FC6024A800DF180101";
    String UNIONPAY_AID = "9F0607A00000033301019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";

    String VISA_RID = "9F0605A000000003DF0314B4BC56CC4E88324932CBC643D6898F6FE593B172DF028190A89F25A56FA6DA258C8CA8B40427D927B4A1EB4D7EA326BBB12F97DED70AE5E4480FC9C5E8A972177110A1CC318D06D2F8F5C4844AC5FA79A4DC470BB11ED635699C17081B90F1B984F12E92C1C529276D8AF8EC7F28492097D8CD5BECEA16FE4088F6CFAB4A1B42328A1B996F9278B0B7E3311CA5EF856C2F888474B83612A82E4E00D0CD4069A6783140433D50725F9F220107DF0503311217DF040103";
    String MASTER_RID = "9F0605A000000004DF0314381A035DA58B482EE2AF75F4C3F2CA469BA4AA6CDF028190A6DA428387A502D7DDFB7A74D3F412BE762627197B25435B7A81716A700157DDD06F7CC99D6CA28C2470527E2C03616B9C59217357C2674F583B3BA5C7DCF2838692D023E3562420B4615C439CA97C44DC9A249CFCE7B3BFB22F68228C3AF13329AA4A613CF8DD853502373D62E49AB256D2BC17120E54AEDCED6D96A4287ACC5C04677D4A5A320DB8BEE2F775E5FEC59F220104DF050400000000DF040103";
    String JCB_RID = "9F0605A000000065DF0314C75E5210CBE6E8F0594A0F1911B07418CADB5BABDF02819099B63464EE0B4957E4FD23BF923D12B61469B8FFF8814346B2ED6A780F8988EA9CF0433BC1E655F05EFA66D0C98098F25B659D7A25B8478A36E489760D071F54CDF7416948ED733D816349DA2AADDA227EE45936203CBF628CD033AABA5E5A6E4AE37FBACB4611B4113ED427529C636F6C3304F8ABDD6D9AD660516AE87F7F2DDF1D2FA44C164727E56BBC9BA23C02859F220110DF050400000000DF040103";
    String RUPAY_CTLS_AID1 = "9F0607A00000052460009F09020064DF0101009F1B0400004E20DF1506000000000500DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
    String RUPAY_CTLS_AID2 = "9F0607A00000052410109F09020002DF0101009F1B0400004E20DF1506000000000000DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
    String RUPAY_CTLS_AID3 = "9F0607A00000052410119F09020002DF0101009F1B0400004E20DF1506000000000000DF170100DF14039F37049F1A0203565F2A0203569F3501229F3303E068089F4005FF80F0A0019F7B06000000001388DF13051010000000DF1205A468FC9800DF1105A468DC9800DF2006000099999999DF1906000000020000DF2106000000500000DF2A020356DF180101";
    String AMEX_CTLS_AID = "9F0606A000000025019F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205DE00FC9800DF1105DC50fc9800DF2006000000100000DF1906000000000000DF21060000001500019F6604B6404280DF180101DF13050000000000";
    String AMEX_CT_AID = "9F0606A000000025019F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150A393739353831383939369F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050010000000DF1205DE00FC9800DF1105DC50fc9800DF180101";
    String Diners_CTLS_AID1 = "9F0607A00000015230109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205FCE09CF800DF1105DC00002000DF2006999999999999DF1906000000000000DF21060000001500019F6604B6404280DF180101";
    String Diners_CT_AID1 = "9F0607A00000015230109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150A393739353831383939369F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050010000000DF1205FCE09CF800DF1105DC00002000DF180101";
    String Diners_CTLS_AID2 = "9F0607A00000015240109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF1205FCE09CF800DF1105DC00002000DF2006999999999999DF1906000000000000DF21060000001500019F6604B6404280DF180101";
    String Diners_CT_AID2 = "9F0607A00000015240109F09020001DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150A393739353831383939369F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050010000000DF1205FCE09CF800DF1105DC00002000DF180101";
    String UPI_CT_AID1 = "9F0607A00000033301019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";
    String UPI_CT_AID2 = "9F0607A00000033301029F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";
    String UPI_CT_AID3 = "9F0607A00000033301039F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A001DF13050000000000DF1205DC4004F800DF1105D84000A800DF180101";
    String UPI_CTLS_AID1 = "9F0607A00000033301019F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF2006999999999999DF1906000000000000DF21060000005000019F660436000000DF180101";
    String UPI_CTLS_AID2 = "9F0607A00000033301029F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF2006999999999999DF1906000000000000DF21060000005000019F660436000000DF180101";
    String UPI_CTLS_AID3 = "9F0607A00000033301039F09020020DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0F8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105D84000A800DF2006999999999999DF1906000000000000DF21060000005000019F660436000000DF180101";
    String PURE_CTLS_AID = "9F0607A00000061500019F09020200DF0101009F1B0400000000DF150400000000DF170100DF16010097099F1A0295059A039C01DF14039F37049F150F2020202020202020202020202020209F1A0207645F2A0207649F3501229F3303E0B8C89F4005F000F0A0019F1D082CE2000000000000DF1205DC4004F800DF1105DC4000A800DF2006999999999999DF1906000000000000DF21060000001500019F660433004000DF180101DF13050000000000";

    String[] AID_SmartCard = {};
    String[] AID_CTLS_Card = {
            "9F0607A00000015230109F09020200DF010100DF1105FC60242800DF1205FC60ACF800DF130500100000009F1B0400000500DF150400000010DF160190DF170110DF14039F3704DF1801009F7B06000000100000DF1906000000100000DF2006000000100000DF21060000000001009F3303E06008"

    };

    String[] ridList = new String[]{df1b2e39252ea14aa937d0ef2b35dc5c15e5a8deec1510ba0a2759500e86685fb765b102f440bec872503ed7919af72deba2f50b7cc6a4c4bc0548af201c7274faf248239d67fc72a123690300c9a064a5ab97b7f26cfa378a7a0ba3d551b74ea953496858a81ef6a44aa659c253551dd45174bb2a248fdbb66d614ba1c018f952a45c73e1149feadc5b3e2561bef8d4ee0150807ea1dde9b3ddecd5428e3e79721addc660dd28b9cc3bf06066176405d822d659ac7bb9354aa3ba33ddead47dd34b4264e34581DF031492c88f72e3dfc1678ea40d5da5519be1aec001b7DF060101DF070101DF0503311299", "9F2201D39F0605A000000658DF0403010001DF0281909af692ffa01a2cc61b97820aafcbf0844b859726de13ad4caa8d3389a13728b588e1dd33373c8624d9d4be468fa72f5eeebb5fc904a386acef2a4d8a6f8aefd69164cd56183c381bd7fcc2a16c6b12305729ffea766699f54ca01d97761170c7a77b027028f12fb79fcb5e034983743a5ce9c2fe0753021bc9c8ca7555320d0cf4e1182f96bc3a1500c335199e701459DF031424568c62d69fbf64fdd00a16a3b9f132a124ee92DF060101DF070101DF0503311299",};



    public void My01setEncryptDataKey(Bundle dataKey, Bundle mode) {

        try {
            logUtils.addCaseLog("setEncryptDataKey execute");
            logUtils.addCaseLog("dataKey = " + dataKey.toString());
            logUtils.addCaseLog("mode = " + mode.toString());
            boolean result = iSde.setEncryptDataKey(dataKey,mode);
            logUtils.addCaseLog("setEncryptDataKey() execute result = "+result);
        } catch (RemoteException e) {
            logUtils.addCaseLog("setEncryptDataKey exception");
            e.printStackTrace();
        }

    }

    public void My02getEncryptedMsgData(byte[] data, Bundle extend) {
        try {
            logUtils.addCaseLog("getEncryptedMsgData execute");
            Bundle bundle = iSde.getEncryptedMsgData(data,extend);
            byte[] encryptedData = bundle.getByteArray("encryptedData");
            byte[] ksn = bundle.getByteArray("ksn");
            logUtils.addCaseLog("encryptedData = "+ StringUtil.byte2HexStr(encryptedData) +";");
            logUtils.addCaseLog("ksn = "+ StringUtil.byte2HexStr(ksn) +";");
        } catch (RemoteException e) {
            logUtils.addCaseLog("getEncryptedMsgData exception");
            e.printStackTrace();
        }
    }

    public void My03cardDetection(Bundle cardOption, int timeout, CardDetectionListener listener) {
        try {
            logUtils.addCaseLog("cardDetection execute");
            iSde.cardDetection(cardOption,timeout,listener);
        } catch (RemoteException e) {
            logUtils.addCaseLog("cardDetection exception");
            e.printStackTrace();
        }
    }

    public void My04setObfuscatedPanNum(int first, int last) {
        try {
            logUtils.addCaseLog("setObfuscatedPanNum execute");
            boolean result = iSde.setObfuscatedPanNum(first,last);
            logUtils.addCaseLog("setObfuscated result = "+result);
        } catch (RemoteException e) {
            logUtils.addCaseLog("setObfuscatedPanNum exception");
            e.printStackTrace();
        }
    }

    public void My05getEncryptedData(int cardType, String tag,Bundle extend) {
        logUtils.addCaseLog("getEncryptedData execute");
        try {
            Log.d(TAG,"cardType = "+cardType+";");
            Log.d(TAG,"tag = "+tag+";");
            logUtils.addCaseLog("cardType = "+cardType);
            logUtils.addCaseLog("tag = "+tag);

            Bundle emvSensitiveCardData = iSde.getEncryptedData(cardType, tag,extend);
            byte[] encryptedData = emvSensitiveCardData.getByteArray("encryptedData");
            byte[] ksn = emvSensitiveCardData.getByteArray("ksn");
            byte[] initVec = emvSensitiveCardData.getByteArray("initVec");
            int result = emvSensitiveCardData.getInt("result");

            if (emvSensitiveCardData.getInt("result") == 0) {
                logUtils.addCaseLog("get success");
                logUtils.addCaseLog("encryptedData = "+ StringUtil.byte2HexStr(encryptedData));
                logUtils.addCaseLog("ksn = "+ StringUtil.byte2HexStr(ksn));
                logUtils.addCaseLog("initVec = "+ StringUtil.byte2HexStr(initVec));
                logUtils.addCaseLog("result = "+ result);

                Log.d(TAG,"encryptedData = "+ StringUtil.byte2HexStr(encryptedData));
                Log.d(TAG,"ksn = "+ StringUtil.byte2HexStr(ksn));
                Log.d(TAG,"initVec = "+ StringUtil.byte2HexStr(initVec));
                Log.d(TAG,"result = "+ result);


            }else {
                Log.d(TAG,"result = "+result);
                logUtils.addCaseLog("result = "+result);
            }

        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void My06initSecurityKeyBoardView(Bundle param) {

    }

    public void My07startSecurityKeyBoardEntry() {
//        try {
//            logUtils.addCaseLog("startSecurityKeyBoardEntry execute");
//            Bundle bundle = new Bundle();
//            bundle.putBoolean("inputType", true);
//            iSde.startSecurityKeyBoardEntry(bundle);
//        } catch (RemoteException e) {
//            logUtils.addCaseLog("startSecurityKeyBoardEntry exception");
//            e.printStackTrace();
//        }
    }

    public void My08initPinInputView(final Bundle importData) {
        logUtils.addCaseLog("My08initPinInputView execute");

        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        int keyId = 99;
        byte[] pinLimit = {4,6};

        //initPinInputView:
        bundle.putInt("keyId",keyId);
        bundle.putByteArray("pinLimit",pinLimit);
        bundle.putInt("timeout",20);
        bundle.putBoolean("isOnline",false);
        bundle.putByteArray("displayKeyValue",new byte[]{0,1,2,3,4,5,6,7,8,9});
        //startPinpad:
        bundle.putInt("keyId2",keyId);
        bundle.putInt("pinBlockType", 0x00);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putBundle("importData",importData);

//        bundle.putByte("dispersionType", (byte) 0x02);
//        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);
    }

    public void My09startPinpad(int keyId, int pinBlockType, int keySystem, int mode, Bundle extraParams, SecurityPinInputListener listener) {
//        try {
//            logUtils.addCaseLog("startPinpad execute");
//            iSde.startPinpad(keyId, pinBlockType, keySystem, mode, extraParams,listener);
//        } catch (RemoteException e) {
//            logUtils.addCaseLog("startPinpad exception");
//            e.printStackTrace();
//        }
    }

    public void My10cleanSensitiveData() {
        try {
            logUtils.addCaseLog("cleanSensitiveData execute");
            iSde.cleanSensitiveData();
        } catch (Exception e) {
            logUtils.addCaseLog("cleanSensitiveData exception");
            e.printStackTrace();
        }
    }

    public void My11getSDEVer() {
        try {
            logUtils.addCaseLog("getSDEVer execute");
            String result = iSde.getSDEVer();
            logUtils.addCaseLog("getSDEVer result = "+result);
        } catch (RemoteException e) {
            logUtils.addCaseLog("getSDEVer exception");
            e.printStackTrace();
        }
    }

    public boolean My12loadDukptKey(int keyId, byte[] ksn, byte[] key, byte[] checkValue, Bundle extend){
        logUtils.addCaseLog("loadDukptKey executed");
        boolean ret = false;
        try {
            long startTime = System.currentTimeMillis();
            ret = iDukpt.loadDukptKey(keyId, ksn, key, checkValue, extend);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("loadDukptKey executeTime : " + (endTime - startTime) + " ms");

            if (ret) {
                logUtils.addCaseLog("download dukpt key[" + keyId + "]success");
            } else {
                logUtils.addCaseLog("download dukpt key[" + keyId + "]failed");
                String errString = iDukpt.getLastError();
                logUtils.addCaseLog("Result：download dukpt key =" + ret);
                if (errString != null) {
                    logUtils.addCaseLog(errString);
                }
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
        return ret;
    }


    public void My13StartEMV(final int processType, final Bundle intent, final EMVHandler emvhandler) throws RemoteException {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        String msg;

        if (intent == null) {
            msg = "The ginseng error";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            return;
        }
        if (intent.getBoolean("doNotChangeCardType")) {
            int cardType = intent.getInt("cardType");
            if (cardType == 0) logUtils.addCaseLog("Please insert the card");
            else if (cardType == 1) logUtils.addCaseLog("Please swipe the card");
        } else logUtils.addCaseLog("Please insert/wave/swipe your card");


        iSde.cardDetection(cardOption, 30*1000, new CardDetectionListener.Stub() {
            String msg;

            @Override
            public void onCardSwiped(Bundle track) throws RemoteException {
                msg = "Card detection: credit card swiped successfully";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                MStopCheckCard();
            }

            @Override
            public void onCardPowerUp() throws RemoteException {
                msg = "Card test: IC card inserted successfully";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);
//                logUtils.addCaseLog(msg);

                MStopCheckCard();

                if (emvhandler == null) {
                    message = new Message();
                    msg = "Handler is null";
                    message.getData().putString("message", msg);
                    handler.sendMessage(message);
                }
                try {
                    Bundle intent1 = intent;
                    iEmv.startEMV(processType, intent1, emvhandler);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onCardActivate() throws RemoteException {
                msg = "Card test: the card is successfully connected";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                MStopCheckCard();

                if (emvhandler == null) {
                    message = new Message();
                    Log.d(TAG, "Handler is null");
                    msg = "Handler is null";
                    message.getData().putString("message", msg);
                    handler.sendMessage(message);
                }

                try {
                    Bundle intent1 = intent;

                    /*don't change transaction type for test case K17, card type will be changed according the check card result for other test case */
                    if (intent.getBoolean("doNotChangeCardType") == false)
                        intent1.putInt("cardType", 1);

                    iEmv.startEMV(processType, intent1, emvhandler);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onTimeout() throws RemoteException {
                logUtils.addCaseLog("Card detection: timeout");
                MStopCheckCard();
                Message message1 = new Message();
                message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }

            @Override
            public void onError(int error, String message) throws RemoteException {
                msg = "Card detection: Error" + error + message;

                MStopCheckCard();
                Message message1 = new Message();
                if (error == 3) message1.getData().putString("message", msg + "Fallback deal");
                else message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }
        });
    }

    public void My14abortEMV() {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.abortEMV();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("abortEMV executeTime" + (endTime - startTime));
        } catch (Exception e) {
            logUtils.addCaseLog("abortEMV execute exception");
            e.printStackTrace();
        }
    }

    public void My15importAppSelect(int index) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importAppSelection(index);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importAppSelect executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importAppSelect execute exception");
            e.printStackTrace();
        }
    }

    public void My16importPin(int option, byte[] pin) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importPin(option, pin);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importPin executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importPin execute exception");
            e.printStackTrace();
        }
    }

    public void My17importCardConfirmResult(boolean pass) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importCardConfirmResult(pass);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importCardConfirmResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("\nimportCardConfirmResult execute exception");
            e.printStackTrace();
        }
    }

    public void My18importOnlineResult(Bundle onlineResult, OnlineResultHandler handler) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importOnlineResult(onlineResult, handler);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importOnlineResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void My19setEMVData(List<String> tlvList) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.setEMVData(tlvList);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("setEMVData executeTime" + (endTime - startTime));
            ArrayList<String> taglist = new ArrayList<String>();
            for (String str : tlvList) {
                Map<String, String> map = TlvUtil.tlvToMap(str);
                Set<Map.Entry<String, String>> entrys = map.entrySet();
                for (Map.Entry<String, String> entry : entrys) {
                    Log.d(TAG, entry.getKey() + " display--> " + entry.getValue());
                    taglist.add(entry.getKey());
                }
            }
            logUtils.addCaseLog("getAppTLVList:" + iEmv.getAppTLVList(taglist.toArray(new String[0])));
        } catch (Exception e) {
            logUtils.addCaseLog("setEMVData execute exception");
            e.printStackTrace();
        }
    }

    public void My20getAppTLVList(String[] tagList) {
        try {
            long startTime = System.currentTimeMillis();
            String strs = iEmv.getAppTLVList(tagList);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getAppTLVList executeTime" + (endTime - startTime));
            if (null != strs) {
                logUtils.addCaseLog("AppTLVList: " + strs);
            } else {
                logUtils.addCaseLog("Return length null");
            }
        } catch (Exception e) {
            logUtils.addCaseLog("getAppTLVList call exception");
            e.printStackTrace();
        }
    }

    public String My21getEMVData(String tagName) {
        try {
            long startTime = System.currentTimeMillis();
            String str = iEmv.getEMVData(tagName);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getEMVData executeTime" + (endTime - startTime));
            logUtils.addCaseLog("getEMVData execute" + tagName);
            if (null != str && str.length() > 0) {
                logUtils.addCaseLog("getEMVData return " + str);
            } else {
                logUtils.addCaseLog("getEMVData return null");
            }
            return str;
        } catch (Exception e) {
            logUtils.addCaseLog("getEMVData execute exception");
            e.printStackTrace();
            return null;
        }
    }



    public int My23emvProcessingRequestOnline() {
        try {
            long startTime = System.currentTimeMillis();
            int ret = iEmv.emvProcessingRequestOnline();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("emvProcessingRequestOnline executeTime" + (endTime - startTime));
            logUtils.addCaseLog("emvProcessingRequestOnline execute:" + ret);
            return ret;
        } catch (Exception e) {
            logUtils.addCaseLog("emvProcessingRequestOnline execute exception");
            e.printStackTrace();
            return -1;
        }
    }

    public void My24enableTrack(int trkNum) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.enableTrack(trkNum);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("enableTrack executeTime" + (endTime - startTime));
            logUtils.addCaseLog("enableTrack execute result:");
        } catch (Exception e) {
            logUtils.addCaseLog("enableTrack execute exception");
            e.printStackTrace();
        }
    }


    public void My25byPassPin(boolean byPass) {
        try {
            logUtils.addCaseLog("Execute My31SetByPass success");
            iEmv.setByPassAllPin(byPass);
            logUtils.addCaseLog("isByPassAllPin :" + iEmv.isByPassAllPin());
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute My31SetByPass Failed");
            e.printStackTrace();
        }
    }

    public void My26setAcType(SdeMoudle.MyAcTypeCallback myAcTypeCallback) {
        try {
            logUtils.addCaseLog("Execute My32setAcType");
            iEmv.setRequestACTypeCallBack(myAcTypeCallback);
        } catch (RemoteException e) {
            logUtils.addCaseLog("Execute My32setAcType Failed");
            e.printStackTrace();
        }
    }


    public void Q01001(){
//        3DES算法datakey-response加密.loadDUKPT-DES组2明文
        logUtils.addCaseLog("Q01001 execute");
        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",0);
        dataKey.putInt("index",0);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putInt("paddingType",0x06);
        mode.putByte("TDESKeyUsageIndicator", (byte) 0x01);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01002(){
        logUtils.addCaseLog("Q01002 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",0);
        dataKey.putInt("index",99);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putInt("paddingType",0x06);
        mode.putByte("TDESKeyUsageIndicator", (byte) 0x01);
//        mode.putByte("AESKeyUsageIndicator",(byte) 0);
//        mode.putByte("AESDispersionType",(byte) 2);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01003(){
        logUtils.addCaseLog("Q01003 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",1);
        dataKey.putInt("index",0);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putByteArray("IV",null);
        mode.putInt("paddingType",0x06);
//        mode.putByte("DESKeyUsageIndicator", (byte) 0x01);
        mode.putByte("AESKeyUsageIndicator",(byte) 0);
        mode.putByte("AESDispersionType",(byte) 2);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01004(){
        logUtils.addCaseLog("Q01004 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",1);
        dataKey.putInt("index",99);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putByteArray("IV",null);
        mode.putInt("paddingType",0x06);
//        mode.putByte("DESKeyUsageIndicator", (byte) 0x01);
        mode.putByte("AESKeyUsageIndicator",(byte) 0);
        mode.putByte("AESDispersionType",(byte) 2);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01005(){
        logUtils.addCaseLog("Q01005 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",0);
        dataKey.putInt("index",0);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putInt("paddingType",0x06);
        mode.putByte("TDESKeyUsageIndicator", (byte) 0x00);
//        mode.putByte("AESKeyUsageIndicator",(byte) 0);
//        mode.putByte("AESDispersionType",(byte) 2);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01006(){
        logUtils.addCaseLog("Q01006 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",1);
        dataKey.putInt("index",3);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putByteArray("IV",null);
        mode.putInt("paddingType",0x06);
//        mode.putByte("DESKeyUsageIndicator", (byte) 0x01);
        mode.putByte("AESKeyUsageIndicator",(byte) 0);
        mode.putByte("AESDispersionType",(byte) 3);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01007(){
        logUtils.addCaseLog("Q01007 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",1);
        dataKey.putInt("index",6);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putByteArray("IV",null);
        mode.putInt("paddingType",0x06);
//        mode.putByte("DESKeyUsageIndicator", (byte) 0x01);
        mode.putByte("AESKeyUsageIndicator",(byte) 0);
        mode.putByte("AESDispersionType",(byte) 4);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01008(){
        logUtils.addCaseLog("Q01008 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",1);
        dataKey.putInt("index",13);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putByteArray("IV",null);
        mode.putInt("paddingType",0x06);
//        mode.putByte("DESKeyUsageIndicator", (byte) 0x01);
        mode.putByte("AESKeyUsageIndicator",(byte) 0);
        mode.putByte("AESDispersionType",(byte) 0);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q01009(){
        logUtils.addCaseLog("Q01009 execute");

        Bundle dataKey = new Bundle();
        dataKey.putInt("keyMngType",1);
        dataKey.putInt("index",14);

        Bundle mode = new Bundle();
        mode.putInt("encModel",0x02);
        mode.putInt("IVType",0x01);
        mode.putByteArray("IV",null);
        mode.putInt("paddingType",0x06);
//        mode.putByte("DESKeyUsageIndicator", (byte) 0x01);
        mode.putByte("AESKeyUsageIndicator",(byte) 0);
        mode.putByte("AESDispersionType",(byte) 1);

        My01setEncryptDataKey(dataKey,mode);
    }

    public void Q02001() {
         Q01001();//3DES算法datakey-response加密
        logUtils.addCaseLog("Q02001 execute");
        byte[] data = BCDDecode.str2Bcd("34343434343434343939393939393939");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02002(){
        Q01002();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("34343434343434343939393939393939");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02003(){
        Q01003();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("39393939393939393434343434343434");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02004(){
        Q01004();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("39393939393939393434343434343136");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02005(){
        Q01005();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("34343434343434343939393939393939");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02006(){
        Q01006();
        logUtils.addCaseLog("Q02002 execute");
        byte[] data = BCDDecode.str2Bcd("39393939393939393434343430303136");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02007(){
        Q01007();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("39393939393939393434343430303136");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02008(){
        Q01008();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("39393939393939393434343430303136");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q02009(){
        Q01009();
        logUtils.addCaseLog("Q02002 execute");

        byte[] data = BCDDecode.str2Bcd("39393939393939393434343430303136");
        My02getEncryptedMsgData(data, null);//加密数据
    }

    public void Q03001() {
        Q01001();
        logUtils.addCaseLog("Q03001 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03002(){
        Q01003();
        logUtils.addCaseLog("Q03002 execute");

        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03003(){
        Q01001();//        验证白名单内卡号刷卡可以返回明文数据
        logUtils.addCaseLog("Q03002 execute");

        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03004() {
        Q01001();
        logUtils.addCaseLog("Q03004 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", false);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03005() {
        Q01001();
        logUtils.addCaseLog("Q03005 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", false);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03006() {
        Q01001();
        logUtils.addCaseLog("Q03006 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03007() {
        Q01001();
        logUtils.addCaseLog("Q03007 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", false);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03008() {
        Q01001();
        logUtils.addCaseLog("Q03008 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03009() {
        Q01001();
        logUtils.addCaseLog("Q03009 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03010() {
        Q01001();
        logUtils.addCaseLog("Q03010 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", false);
        cardOption.putBoolean("supportSmartCard", false);
        cardOption.putBoolean("supportCTLSCard", false);
        My03cardDetection(cardOption, 60000, new MyListener());
    }


    public void Q03011() {
        logUtils.addCaseLog("Q03011 execute");
        My03cardDetection(null, 30, new MyListener());
    }

    public void Q03012() {
        Q01001();
        logUtils.addCaseLog("Q03012 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, null);
    }

    public void Q03013() {
        Q01001();
        logUtils.addCaseLog("Q03013 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 30000, new MyListener());
    }

    public void Q03014() {
        Q01001();
        logUtils.addCaseLog("Q03014 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 0, new MyListener());
    }

    public void Q03015() {
        Q01001();
        logUtils.addCaseLog("Q03015 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, -1, new MyListener());
    }

    public void Q03016() {
        Q01001();
        logUtils.addCaseLog("Q03016 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 300000, new MyListener());
    }

    public void Q03017() {
        Q01001();
        logUtils.addCaseLog("Q03017 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 301000, new MyListener());
    }

    public void Q03018() {
        Q01001();
        logUtils.addCaseLog("Q03018 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03019() {
        Q01001();
        logUtils.addCaseLog("Q03019 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03020() {
        Q01001();
        logUtils.addCaseLog("Q03020 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03021() {
        Q01001();
        logUtils.addCaseLog("Q03021 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03022() {
        Q01001();
        logUtils.addCaseLog("Q03022 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03023() {
        Q01001();
        logUtils.addCaseLog("Q03023 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03024() {
        Q01001();
        logUtils.addCaseLog("Q03024 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 60000, new MyListener());
    }

    public void Q03025() {
        Q01001();
        logUtils.addCaseLog("Q03025 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 300000, new MyListener());
    }

    public void Q03026() {
        logUtils.addCaseLog("Q03026 execute");
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        My03cardDetection(cardOption, 300000, new MyListener());
    }


    public void Q04001() {
        logUtils.addCaseLog("Q04001 executed");
        My04setObfuscatedPanNum(6, 4);
    }


    public void Q04002() {
        logUtils.addCaseLog("Q04002 executed");
        My04setObfuscatedPanNum(8, 4);
    }

    public void Q04003() {
        logUtils.addCaseLog("Q04003 executed");
        My04setObfuscatedPanNum(6, 6);
    }

    public void Q04004() {
        logUtils.addCaseLog("Q04004 executed");
        My04setObfuscatedPanNum(7, 4);
    }

    public void Q04005() {
        logUtils.addCaseLog("Q04005 executed");
        My04setObfuscatedPanNum(-1, 4);
    }

    public void Q04006() {
        logUtils.addCaseLog("Q04006 executed");
        My04setObfuscatedPanNum(6, -1);
    }

    public void Q04007() {
        logUtils.addCaseLog("Q04007 executed");
        My04setObfuscatedPanNum(0, 4);
    }

    public void Q04008() {
        logUtils.addCaseLog("Q04008 executed");
        My04setObfuscatedPanNum(6, 0);
    }


    public void Q05001() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "5A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }
    public void Q05002() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 0;
        String tag = "9F33";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05003() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05003 executed");

        int cardType = 0;
        String tag = "9F36";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05004() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05004 executed");

        int cardType = 0;
        String tag = "25";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05005() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "9A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05006() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "56";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05007() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "57";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05008() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "9F1F";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }


    public void Q05009() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "9F20";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }


    public void Q05010() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "5F24";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05011() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "5F20";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05012() {
//        获取非接卡号
        logUtils.addCaseLog("Q05008 executed");

        int cardType = 1;
        String tag = "5A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05013() {
//        获取非接卡号
        logUtils.addCaseLog("Q05009 executed");

        int cardType = 1;
        String tag = "9A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x02);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05014() {
//        获取非接卡号
        logUtils.addCaseLog("Q05010 executed");

        int cardType = 1;
        String tag = "9F36";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x03);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05015() {
//        获取非接卡号
        logUtils.addCaseLog("Q05011 executed");

        int cardType = 1;
        String tag = "25";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x04);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05016() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "56";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x05);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05017() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "57";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05018() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "9F1F";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x07);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05019() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "9F20";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x07);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05020() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "5F24";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05021() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "5F20";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }


    public void Q05022() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "9F6B";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x07);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }


    public void Q05023() {
//        获取非接卡号
        logUtils.addCaseLog("Q05002 executed");

        int cardType = 1;
        String tag = "FF9005";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x07);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05024() {
//        获取非接卡号
        logUtils.addCaseLog("Q05024 executed");

        int cardType = 1;
        String tag = "FF9006";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x07);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05025(){
//        Q12001();
//        Q01001();
        logUtils.addCaseLog("Q05025 executed");
        //setPaddingAlignType
        int cardType = 0;
        String tag = "5F24";

        logUtils.addCaseLog("setPaddingAlignType executed");
        String key = "pan_expired";
        byte value = (byte) 0;
        Map<String,Byte> map = new HashMap<>();
        map.put(key,value);
        try {
            boolean ret = iSde.setPaddingAlignType(map);
            logUtils.addCaseLog("ret = "+ret);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        My05getEncryptedData(cardType,tag,null);

    }

    public void Q05026(){
        logUtils.addCaseLog("Q05026 executed");
        //setPaddingAlignType
        int cardType = 0;
        String tag = "5F24";

        logUtils.addCaseLog("setPaddingAlignType executed");
        String key = "pan_expired";
        byte value = (byte) 1;
        Map<String,Byte> map = new HashMap<>();
        map.put(key,value);
        try {
            boolean ret = iSde.setPaddingAlignType(map);
            logUtils.addCaseLog("ret = "+ret);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        My05getEncryptedData(cardType,tag,null);

    }

    public void Q05027(){

        logUtils.addCaseLog("Q05027 executed");
        //setPaddingAlignType
        int cardType = 0;
        String tag = "5F24";

        logUtils.addCaseLog("setPaddingAlignType executed");
        String key = "pan_expired";
        byte value = (byte) 2;
        Map<String,Byte> map = new HashMap<>();
        map.put(key,value);
        try {
            boolean ret = iSde.setPaddingAlignType(map);
            logUtils.addCaseLog("ret = "+ret);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        My05getEncryptedData(cardType,tag,null);

    }

    public void Q05028(){

        logUtils.addCaseLog("Q05025 executed");
        //setPaddingAlignType
        int cardType = 1;
        String tag = "5F24";

        logUtils.addCaseLog("setPaddingAlignType executed");
        String key = "pan_expired";
        byte value = (byte) 0;
        Map<String,Byte> map = new HashMap<>();
        map.put(key,value);
        try {
            boolean ret = iSde.setPaddingAlignType(map);
            logUtils.addCaseLog("ret = "+ret);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        My05getEncryptedData(cardType,tag,null);

    }

    public void Q05029(){

        logUtils.addCaseLog("Q05026 executed");
        //setPaddingAlignType
        int cardType = 1;
        String tag = "5F24";

        logUtils.addCaseLog("setPaddingAlignType executed");
        String key = "pan_expired";
        byte value = (byte) 1;
        Map<String,Byte> map = new HashMap<>();
        map.put(key,value);
        try {
            boolean ret = iSde.setPaddingAlignType(map);
            logUtils.addCaseLog("ret = "+ret);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        My05getEncryptedData(cardType,tag,null);

    }

    public void Q05030(){

        logUtils.addCaseLog("Q05027 executed");
        //setPaddingAlignType
        int cardType = 1;
        String tag = "5F24";

        logUtils.addCaseLog("setPaddingAlignType executed");
        String key = "pan_expired";
        byte value = (byte) 2;
        Map<String,Byte> map = new HashMap<>();
        map.put(key,value);
        try {
            boolean ret = iSde.setPaddingAlignType(map);
            logUtils.addCaseLog("ret = "+ret);
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

        My05getEncryptedData(cardType,tag,null);

    }

    public void Q05031() {
//        获取插卡卡号

        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "5A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x06);
        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05032() {
//        获取非接卡号
        logUtils.addCaseLog("Q05008 executed");

        int cardType = 1;
        String tag = "5A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x01);
        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05033() {
//        获取插卡卡号
//        Q03001();
        logUtils.addCaseLog("Q05001 executed");

        int cardType = 0;
        String tag = "5A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x01);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05034() {
//        获取非接卡号
        logUtils.addCaseLog("Q05008 executed");

        int cardType = 1;
        String tag = "5A";
        Bundle extend = new Bundle();
        extend.putInt("paddingType",0x01);
//        extend.putByte("paddingAlignType", (byte) 0);
        My05getEncryptedData(cardType,tag,extend);
    }

    public void Q05101(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");
        importData.putString("getCardData","StandardData");
        importData.putBoolean("isGetCardData",true);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"), importData));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void Q05102() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");
        importData.putString("getCardData","StandardData");
        importData.putBoolean("isGetCardData",true);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q05103() {//插卡，需要修改MEmvHandler-onConfirmCardInfo配置的tag,非sensitive tag
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");
        importData.putString("getCardData","StandardData");
        importData.putBoolean("isGetCardData",true);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"), importData));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void Q05104() {//插卡，需要修改MEmvHandler-onConfirmCardInfo配置的tag,随便写个tag
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");
        importData.putString("getCardData","StandardData");
        importData.putBoolean("isGetCardData",true);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"), importData));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void Q06001() {

        Q04001();
  //      Q08101();

        logUtils.addCaseLog("Q06001 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21,25});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06002() {

        Q04001();
        logUtils.addCaseLog("Q06002 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{2,1,7,0,8,9,5,3,4,6});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06003() {

        Q04001();
        logUtils.addCaseLog("Q06003 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{8,9,5,0,3,4,6,2,1,7});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06004() {

        Q04001();
        logUtils.addCaseLog("Q06004 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{8,9,5,3,4,6,2,0,1,7});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06005() {

        Q04002();
        logUtils.addCaseLog("Q06005 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,0,1,7,8,9});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06006() {

        Q04002();
        logUtils.addCaseLog("Q06006 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{2,1,7,8,9,5,0,3,4,6});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06007() {

        Q04002();
        logUtils.addCaseLog("Q06007 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{8,9,0,5,3,4,6,2,1,7});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06008() {

        Q04002();
        logUtils.addCaseLog("Q06008 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{8,9,5,3,4,0,6,2,1,7});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06010() {

        logUtils.addCaseLog("Q06010 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{8,9,5,3,4,0,6,2,1,7});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q06011() {

        logUtils.addCaseLog("Q06010 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{0,1,2,3,4,5,6,7,8,9});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }


    public void Q06012() {

        logUtils.addCaseLog("Q06010 execute");
        Intent intent = new Intent(context, SecurityKeyboardActivity.class);
        Bundle bundle = new Bundle();

        //在这里修改参数
        bundle.putByteArray("displayKeyValue",new byte[]{0,1,2,3});
        bundle.putByteArray("pinLimit",new byte[]{0, 4, 6, 13, 15, 16, 17, 18, 19, 20, 21});
        bundle.putInt("timeout",60);

        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

    }

    public void Q07001(){
        logUtils.addCaseLog("我执行啦");
        byte[] encryptedData = KeyBoardDatas.getInstance().getEncryptedData();
        logUtils.addCaseLog("encryptedData = "+StringUtil.byte2HexStr(encryptedData));

    }



    public void Q08001() {

         Q01001();

        logUtils.addCaseLog("Q08001 execute,3SDE SLOT = 0");

        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",0);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",0);
        bundle.putInt("pinBlockType", 0x00);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

//        bundle.putByte("dispersionType", (byte) 0x02);
//        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();

    }

    public void Q08002() {
        Q01002();


        logUtils.addCaseLog("Q08002 execute,3SDE SLOT = 99");

        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",99);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",99);
        bundle.putInt("pinBlockType", 0x00);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

//        bundle.putByte("dispersionType", (byte) 0x02);
//        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();

    }


    public void Q08003(){
        Q01003();
        logUtils.addCaseLog("Q08003 execute,AES SLOT = 0");
        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",0);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",0);
        bundle.putInt("pinBlockType", 0x04);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putByte("dispersionType", (byte) 0x02);
        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();
    }

    public void Q08004(){
        Q01004();
        logUtils.addCaseLog("Q08004 execute,AES SLOT = 99");
        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",99);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",99);
        bundle.putInt("pinBlockType", 0x04);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putByte("dispersionType", (byte) 0x02);
        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();
    }

    public void Q08005(){
        Q01006();
        logUtils.addCaseLog("Q08005 execute,AES SLOT = 3");
        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",3);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",3);
        bundle.putInt("pinBlockType", 0x04);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putByte("dispersionType", (byte) 0x03);
        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();

    }

    public void Q08006(){
        Q01007();
        logUtils.addCaseLog("Q08006 execute,AES SLOT = 4");
        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",6);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",6);
        bundle.putInt("pinBlockType", 0x04);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putByte("dispersionType", (byte) 0x04);
        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();

    }

    public void Q08007(){
        Q01008();
        logUtils.addCaseLog("Q08007 execute,AES SLOT = 5");
        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",13);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",13);
        bundle.putInt("pinBlockType", 0x04);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putByte("dispersionType", (byte) 0x00);
        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();

    }

    public void Q08008(){
        Q01009();
        logUtils.addCaseLog("Q08008 execute,AES SLOT = 6");
        Intent intent = new Intent(context, PinInputActivity.class);
        Bundle bundle = new Bundle();

        //initPinInputView:
        bundle.putInt("keyId",14);
        bundle.putBoolean("isOnline",true);
        bundle.putByteArray("displayKeyValue",new byte[]{2,5,3,4,6,1,7,8,9,0});
        bundle.putByteArray("pinLimit",new byte[]{0,4,5,6});
        bundle.putInt("timeout",60);

        //startPinpad:
        bundle.putInt("keyId2",14);
        bundle.putInt("pinBlockType", 0x04);
        bundle.putInt("keySystem",0x02);
        bundle.putInt("mode",0x01);

        bundle.putByte("dispersionType", (byte) 0x01);
        bundle.putBoolean("notifyPinLenError",false);
//
        intent.putExtra("initBundle",bundle);
        context.startActivity(intent);

        Q06010();

    }



    public void Q09001(){

    }

    public void Q10001() {
        My10cleanSensitiveData();
    }

    public void Q11001() {
        My11getSDEVer();
    }

    public void Q12001(){
//        ((MyApplication) context).serviceMoudle.getPinpadMoudle().L02001();
        byte[] KSN = Utils.hexStr2Bytes(ksn);
        byte[] key = Utils.hexStr2Bytes(dukptKey);
        Bundle bundle = new Bundle ();
        bundle.putBoolean("isPlainKey",true);
//        bundle.putInt("TEKIndex",0);
        bundle.putBoolean("KSNAutoIncrease",false);
        boolean retValue = My12loadDukptKey(0,KSN,key,null,bundle);
        if(retValue){
            logUtils.addCaseLog("Q12001 case result：" + retValue + "，execute case success！");
            return;
        }
        logUtils.addCaseLog("Q12001 case result：" + retValue + "，execute case Failed！");
    }

    public void Q12002(){
        byte[] KSN = Utils.hexStr2Bytes(ksnAES);
        byte[] key = Utils.hexStr2Bytes(dukptKey);
        Bundle bundle = new Bundle ();
        bundle.putBoolean("isPlainKey",true);
        bundle.putInt("keyType",1);
        bundle.putBoolean("KSNAutoIncrease",false);
        boolean retValue = My12loadDukptKey(0,KSN,key,null,bundle);
        if(retValue){
            logUtils.addCaseLog("Q12001 case result：" + retValue + "，execute case success！");
            return;
        }
        logUtils.addCaseLog("Q12001 case result：" + retValue + "，execute case Failed！");
    }
//    public void Q12002(){
//        Bundle startEmvData = new Bundle();
//        Bundle importData = new Bundle();
//
//        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
//        startEmvData.putInt("cardType", 0);
//        startEmvData.putByte("transProcessCode", (byte) 0x00);
//        startEmvData.putLong("authAmount", 1);
//        startEmvData.putBoolean("isSupportSM", true);
//        startEmvData.putBoolean("isForceOnline", false);
//        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
//        startEmvData.putString("merchantId", "123456789012345");
//        startEmvData.putString("terminalId", "12345678");
//
//        importData.putInt("IsPinInput", 1);
//        importData.putString("importPIN", "9876");
//        importData.putBoolean("cancelCardConfirmResult", false);
//
//        importData.putBoolean("isOnline", true);
//        importData.putString("respCode", "00");
//        importData.putString("authCode", "123456");
//        //插外卡返回的55域
//        importData.putString("field55", "9F3602000291084CD9063B00860000");
//
//        try {
//            MStartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType", 0), importData));
//        } catch (RemoteException e) {
//            e.printStackTrace();
//        }
//    }


    public void Q13001(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");
//        importData.putString("getCardData","StandardData");
//        importData.putBoolean("isGetCardData",true);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"), importData));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void Q13002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");
//        importData.putString("getCardData","StandardData");
//        importData.putBoolean("isGetCardData",true);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(2, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

//    public void Q13004() {
//        Bundle startEmvData = new Bundle();
//        Bundle importData = new Bundle();
//
//        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
//        startEmvData.putInt("cardType", 0);
//        startEmvData.putByte("transProcessCode", (byte) 0x20);
//        startEmvData.putLong("authAmount", 1);
//        startEmvData.putBoolean("isSupportSM", true);
//        startEmvData.putBoolean("isForceOnline", false);
//        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
//        startEmvData.putString("merchantId", "123456789012345");
//        startEmvData.putString("terminalId", "12345678");
//
//        importData.putInt("IsPinInput", 1);
//        importData.putString("importPIN", "9876");
//        importData.putBoolean("cancelCardConfirmResult", false);
//
//        importData.putBoolean("isOnline", true);
//        importData.putString("respCode", "00");
//        importData.putString("authCode", "123456");
//        //插外卡返回的55域
//        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");
//
//        try {
//            My13StartEMV(2, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
//        } catch (RemoteException e) {
//            throw new RuntimeException(e);
//        }
//    }

    public void Q13005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x20);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(2, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

//    public void Q13006() {
//        Bundle startEmvData = new Bundle();
//        Bundle importData = new Bundle();
//
//        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
//        startEmvData.putInt("cardType", 1);
//        startEmvData.putByte("transProcessCode", (byte) 0x20);
//        startEmvData.putLong("authAmount", 1);
//        startEmvData.putBoolean("isSupportSM", true);
//        startEmvData.putBoolean("isForceOnline", false);
//        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
//        startEmvData.putString("merchantId", "123456789012345");
//        startEmvData.putString("terminalId", "12345678");
//
//        importData.putInt("IsPinInput", 1);
//        importData.putString("importPIN", "9876");
//        importData.putBoolean("cancelCardConfirmResult", false);
//
//        importData.putBoolean("isOnline", true);
//        importData.putString("respCode", "00");
//        importData.putString("authCode", "123456");
//        //挥外卡返回的55域
//        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");
//
//        try {
//            My13StartEMV(2, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
//        } catch (RemoteException e) {
//            throw new RuntimeException(e);
//        }
//    }

    public void Q13007(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13008(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13009(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();


        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x31);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13010(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x31);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13011(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x40);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13012(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x40);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13013(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x03);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", null);
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13014(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x03);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13015(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x0B);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");
        importData.putString("getCardData", "StandardData");
        importData.putBoolean("isGetCardData", true);

        try {
            My13StartEMV(2, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13016(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x0B);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");
        importData.putString("getCardData", "StandardData");//standarddatd就是四个tag：9F79、9F51,DF79,DF71
        importData.putBoolean("isGetCardData", true);
        try {
            My13StartEMV(2, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }
    public void Q13017(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", null);

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13018(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13019(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "1234567");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13020(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1000000);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "123456789");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13021(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"), importData));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void Q13022(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13023(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q13024(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }


    public void Q13025(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }


    public void Q14001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q14002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q14003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q14004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("cancelEmvWhenInputPin", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q14005() {
        My14abortEMV();
    }

    public void Q14006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("cancelSelectApplication", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "5F2A0207645F34010082021C0095058080008000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q15001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q15002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q15003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 2);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q15004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 0);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 100001);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }


    public void Q16002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1600);//大于DF21
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 0);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "123456");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);//大于DF21的值，才能输密
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "123456");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16007() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q16008() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q17001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q17002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q17003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", true);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q17004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }


    public void Q18001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q18002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "09");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q18003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q18004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "01");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q18005() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q18006() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", false);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q19001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000000123");

        importData.putStringArrayList("emvDataList", emvData);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q19002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602114B950580800080009A0323");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020764");
        emvData.add("9F0206000000000151");

        importData.putStringArrayList("emvDataList", emvData);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q19003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("issetEMVdata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000056789");

        importData.putStringArrayList("emvDataList", emvData);
        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q19004() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("issetEMVdata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        ArrayList emvData = new ArrayList<String>();
        emvData.add("5F2A020840");
        emvData.add("9F0206000000004567");

        importData.putStringArrayList("emvDataList", emvData);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q20001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q20002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getAppTLVListOption", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q20003() {

        String[] taglist = {"9F15"};
        My20getAppTLVList(taglist);
    }

    public void Q21001() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q21002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 1);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 101);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);
        importData.putBoolean("getEMVata", true);

        importData.putBoolean("isOnline", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //挥外卡返回的55域
        importData.putString("field55", "9F36020014910A0E8CCDA985E83E293030");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q23001(){
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", false);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", false);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("importAppSelectindex", 1);
        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
    }

    public void Q23002() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putBoolean("isForceOnlineWhenCardConfirm", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

    }


    public void Q23003() {
        Bundle startEmvData = new Bundle();
        Bundle importData = new Bundle();

        startEmvData.putBoolean("isPanConfirmOnSimpeProcess", true);
        startEmvData.putInt("cardType", 0);
        startEmvData.putByte("transProcessCode", (byte) 0x00);
        startEmvData.putLong("authAmount", 1);
        startEmvData.putBoolean("isSupportSM", true);
        startEmvData.putBoolean("isForceOnline", false);
        startEmvData.putString("merchantName", "Overseas version of Service test EMV process");
        startEmvData.putString("merchantId", "123456789012345");
        startEmvData.putString("terminalId", "12345678");

        importData.putInt("IsPinInput", 1);
        importData.putString("importPIN", "9876");
        importData.putBoolean("cancelCardConfirmResult", false);

        importData.putBoolean("isOnline", true);
        importData.putBoolean("isForceOnlineWhenInputPin", true);
        importData.putString("respCode", "00");
        importData.putString("authCode", "123456");
        //插外卡返回的55域
        importData.putString("field55", "9F3602000291084CD9063B00860000");

        try {
            My13StartEMV(1, startEmvData, new MEmvHandler(startEmvData.getInt("cardType"),importData));
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }

    }

    public void Q24001() {
        Q03026();
        My24enableTrack(6);
    }

    //setByPassAllPin=true
    public void Q25001() {
        My25byPassPin(true);
        Q13001();
    }

    //setByPassAllPin=false
    public void Q25002() {
        My25byPassPin(false);
        Q13001();
    }

    // AC TYPE  0-AAC
    public void Q26001() {
        int acType = 0;
        My26setAcType(new SdeMoudle.MyAcTypeCallback(acType));
        Q13001();
    }

    // AC TYPE   1-ARQC
    public void Q26002() {
        int acType = 1;
        My26setAcType(new SdeMoudle.MyAcTypeCallback(acType));
        Q13001();
    }

    // AC TYPE  2-TC
    public void Q26003() {
        int acType = 2;
        My26setAcType(new SdeMoudle.MyAcTypeCallback(acType));
        Q13001();
    }


    private class MyAcTypeCallback extends RequestACTypeHandler.Stub {
        private int type;

        public MyAcTypeCallback(int type) {
            this.type = type;
        }

        @Override
        public void requestConfirmACType(String aid, int defaultACType) throws RemoteException {
            logUtils.addCaseLog("requestConfirmACType aid=" + aid + ",defaultACType = " + defaultACType);
            logUtils.addCaseLog("setRequestACType:" + type);
            iEmv.setRequestACType(type);
        }

    }



    public void MStartEMV(final int processType, final Bundle intent, final EMVHandler emvhandler) throws RemoteException {
        Bundle cardOption = new Bundle();
        cardOption.putBoolean("supportMagCard", true);
        cardOption.putBoolean("supportSmartCard", true);
        cardOption.putBoolean("supportCTLSCard", true);
        String msg;

        if (intent == null) {
            msg = "The ginseng error";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            return;
        }
        if (intent.getBoolean("doNotChangeCardType")) {
            int cardType = intent.getInt("cardType");
            if (cardType == 0) logUtils.addCaseLog("Please insert the card");
            else if (cardType == 1) logUtils.addCaseLog("Please swipe the card");
        } else logUtils.addCaseLog("Please insert/wave/swipe your card");


        iSde.cardDetection(cardOption, 30*1000, new CardDetectionListener.Stub() {
            String msg;

            @Override
            public void onCardSwiped(Bundle track) throws RemoteException {
                msg = "Card detection: credit card swiped successfully";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                MStopCheckCard();
            }

            @Override
            public void onCardPowerUp() throws RemoteException {
                msg = "Card test: IC card inserted successfully";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                MStopCheckCard();

                if (emvhandler == null) {
                    message = new Message();
                    msg = "Handler is null";
                    message.getData().putString("message", msg);
                    handler.sendMessage(message);
                }
                try {
                    Bundle intent1 = intent;
                    iEmv.startEMV(processType, intent1, emvhandler);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onCardActivate() throws RemoteException {
                msg = "Card test: the card is successfully connected";
                Message message = new Message();
                message.getData().putString("message", msg);
                handler.sendMessage(message);

                MStopCheckCard();

                if (emvhandler == null) {
                    message = new Message();
                    Log.d(TAG, "Handler is null");
                    msg = "Handler is null";
                    message.getData().putString("message", msg);
                    handler.sendMessage(message);
                }

                try {
                    Bundle intent1 = intent;

                    /*don't change transaction type for test case K17, card type will be changed according the check card result for other test case */
                    if (intent.getBoolean("doNotChangeCardType") == false)
                        intent1.putInt("cardType", 1);

                    iEmv.startEMV(processType, intent1, emvhandler);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onTimeout() throws RemoteException {
                logUtils.addCaseLog("Card detection: timeout");
                MStopCheckCard();
                Message message1 = new Message();
                message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }

            @Override
            public void onError(int error, String message) throws RemoteException {
                msg = "Card detection: Error" + error + message;

                MStopCheckCard();
                Message message1 = new Message();
                if (error == 3) message1.getData().putString("message", msg + "Fallback deal");
                else message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }
        });
    }

    public void MStopCheckCard() {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.stopCheckCard();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("stopCheckCard executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("stopCheckCard execute exception");
            e.printStackTrace();
        }
    }

    private class MyListener extends CardDetectionListener.Stub {

        String msg;
        long startTime = System.currentTimeMillis();
        boolean needSecondTapScript = false;

        @Override
        public void onCardSwiped(Bundle track) throws RemoteException {
            msg = "PAN:" + track.getString("PAN") + "\nTRACK1:" + track.getString("TRACK1") + "\nTRACK2:" + track.getString("TRACK2") + "\nTRACK3:" + track.getString("TRACK3") + "\nSERVICE_CODE:" + track.getString("SERVICE_CODE") + "\nEXPIRED_DATE:" + track.getString("EXPIRED_DATE");
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onCardSwiped execute Time" + (endTime - startTime));
//            My28turnOff(1);
        }

        @Override
        public void onCardPowerUp() throws RemoteException {
//            ((MyApplication) context).serviceMoudle.getBeerMoudle().B01006();
            msg = "Card test: IC card inserted successfully";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onCardPowerUp execute Time" + (endTime - startTime));
        }

        @Override
        public void onCardActivate() throws RemoteException {
            msg = "Card test: successfully waved the card";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onCardActivate execute Time" + (endTime - startTime));
//            My28turnOff(1);
//            if (needSecondTapScript) {
//                ;
//            }
        }

        @Override
        public void onTimeout() throws RemoteException {
            msg = "Card detection: timeout";
            Message message = new Message();
            message.getData().putString("message", msg);
            handler.sendMessage(message);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onTimeout execute Time" + (endTime - startTime));
        }

        @Override
        public void onError(int error, String message) throws RemoteException {
            msg = "Check card error code = " + error + " " + message;
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("onError execute Time" + (endTime - startTime));
        }
    }


    private class MEmvHandler extends EMVHandler.Stub {
        String msg;
        String str;
        Bundle importData;
        int cardType = -1;

        public MEmvHandler(Bundle importData) {
            this.importData = importData;
        }

        public MEmvHandler(int cardType, Bundle importData) {
            this.cardType = cardType;
            this.importData = importData;
        }

        @Override
        public void onRequestAmount() throws RemoteException {
            Log.d(TAG, "onRequestAmount callback");
            Boolean cancelAmountConfirmResult = importData.getBoolean("cancelAmountConfirmResult");
            if (cancelAmountConfirmResult) {
                My14abortEMV();
                msg = "Cancel import amount";
            } else {
                msg = "Please import the amount:" + importData.getLong("importAmount");
                //import amount to kernel
                MImportAmount(importData.getLong("importAmount"));
            }
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);
        }

        @Override
        public void onSelectApplication(List<Bundle> appList) throws RemoteException {
            int i = 1;
            Log.d(TAG, "onSelectApplication callback");

            Boolean cancelSelectApplication = importData.getBoolean("cancelSelectApplication");
            if (cancelSelectApplication) {
                My14abortEMV();
                logUtils.addCaseLog("Deselect the application");
                return;
            }
            if (importData.getString("testAppSelectTimeOut", null) != null) {
                logUtils.addCaseLog("AppSelectTimeOut=" + importData.getString("testAppSelectTimeOut", null));
                logUtils.addCaseLog("test app selection timeout,skip import app selection flow");
                return;
            }

            for (Bundle app : appList) {
                String str1 = app.getString("aidName");
                String str2 = app.getString("aidLabel");
                String str3 = app.getString("aid");
                msg = msg + (i++ + ".aidName=" + str1 + " aidLabel=" + str2 + " aid=" + str3 + "\n");
            }
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);

            MImportAppSelect(importData.getInt("importAppSelectindex"));
        }

        @Override
        public void onConfirmCardInfo(Bundle info) throws RemoteException {
//            Looper.prepare();
            String result = "onConfirmCardInfo callback, \nPAN:" + info.getString("PAN") + "\nTRACK2:" + info.getString("TRACK2") + "\nCARD_SN:" + info.getString("CARD_SN") + "\nSERVICE_CODE:" + info.getString("SERVICE_CODE") + "\nEXPIRED_DATE:" + info.getString("EXPIRED_DATE") + "\nCARD_TYPE:" + info.getInt("CARD_TYPE");

            Boolean getData = importData.getBoolean("getEMVata");
            if (getData) {
                String strs = "PAN:" + My21getEMVData("PAN") + "\n" + "TRACK2:" + My21getEMVData("TRACK2") + "\n" + "CARD_SN:" + My21getEMVData("CARD_SN") + "\n" + "EXPIRED_DATE:" + My21getEMVData("EXPIRED_DATE") + "\n" + "DATE:" + My21getEMVData("DATE") + "\n" + "TIME:" + My21getEMVData("TIME") + "\n" + "BALANCE:" + My21getEMVData("BALANCE") + "\n" + "CURRENCY:" + My21getEMVData("CURRENCY");

                Log.d(TAG, "getEMVData : " + strs);
                msg = strs;
//                logUtils.addCaseLog(msg);
                Message message1 = new Message();
////                message1.getData().putString("message", "");
                message1.getData().putString("message", msg);
                handler.sendMessage(message1);
            }

            boolean isGetCardData = importData.getBoolean("isGetCardData");
            logUtils.addCaseLog("下面判断是否获取tag：");
            logUtils.addCaseLog("getCardData ="+importData.getString("getCardData"));
            if (isGetCardData) {
                logUtils.addCaseLog("isGetCardData = "+isGetCardData);
                if ("StandardData".equals(importData.getString("getCardData"))) {
                    if (cardType == 0){
                        logUtils.addCaseLog("下面添加接触的tag");
                        My05getEncryptedData(0,"5A",null);//pan
                        My05getEncryptedData(0,"56",null);//track1
                        My05getEncryptedData(0,"57",null);//track2
                        My05getEncryptedData(0,"9F1F",null);//track1 DD
                        My05getEncryptedData(0,"9F20",null);//track2 DD
                        My05getEncryptedData(0,"5F24",null);//Expiration Date
                        My05getEncryptedData(0,"5F20",null);//CardHolder Name
                        My05getEncryptedData(0,"9F33",null);
                        My05getEncryptedData(0,"9F26",null);
//                        My05getEncryptedData(0,"9F00",null);
                        logUtils.addCaseLog("添加完毕");

                    }else if (cardType == 1){
                        logUtils.addCaseLog("下面添加非接的tag");
                        My05getEncryptedData(1,"5A",null);//pan
                        My05getEncryptedData(1,"56",null);//track1
                        My05getEncryptedData(1,"57",null);//track2
                        My05getEncryptedData(1,"9F1F",null);//track1 DD
                        My05getEncryptedData(1,"9F20",null);//track2 DD
                        My05getEncryptedData(1,"5F24",null);//Expiration Date
                        My05getEncryptedData(1,"9F6B",null);//MSD track2
                        My05getEncryptedData(1,"FF9005",null);//MSD Pseudo track1
                        My05getEncryptedData(1,"FF9006",null);//MSD Pseudo track2
                        My05getEncryptedData(1,"5F20",null);//CardHolder Name
                        My05getEncryptedData(1,"9F26",null);
                        logUtils.addCaseLog("添加完毕");
                    }else {
                        logUtils.addCaseLog("cardType 不存在");
                    }
                }else {
                    logUtils.addCaseLog("getCardData != StandardData，不获取tag");
                }
            }else {
                logUtils.addCaseLog("isGetCardData = "+isGetCardData);
            }

            ArrayList<String> emvData = importData.getStringArrayList("emvDataList");
            if (emvData!=null){
                My19setEMVData(emvData);
            }

            if (importData.getBoolean("emptyEmvData")){
                My19setEMVData(null);
            }

            if (importData.getBoolean("isForceOnlineWhenCardConfirm")){
                My23emvProcessingRequestOnline();
            }


            Boolean CancelCardConfirmResult = importData.getBoolean("cancelCardConfirmResult");

            if (CancelCardConfirmResult) {
                msg = "Card number:" + info.getString("PAN") + "cancel";
                MImportCardConfirmResult(false);
            } else {
                msg = "Card number:" + info.getString("PAN") + "confirm";
                MImportCardConfirmResult(true);
            }

            msg = result;
            Message message1 = new Message();
            message1.getData().putString("message", msg);
//            logUtils.addCaseLog("onConfirmCardInfo: "+msg);
            Log.d(TAG, "onConfirmCardInfo: " + msg);
            handler.sendMessage(message1);

        }

        @Override
        public void onRequestInputPIN(boolean isOnlinePin, int retryTimes) throws RemoteException {

            String result = "onRequestInputPIN callback, isOnlinePin:" + isOnlinePin + "\n" + "retryTimes:" + retryTimes;

            int IsPinInput = importData.getInt("IsPinInput");

            if (importData.getBoolean("isPinpadError")) {
                Log.d(TAG,"isPinpadError == true");
                if (isOnlinePin) msg = "Request online PIN: password keyboard error";
                else msg = "Request offline PIN: password keyboard error";
            } else {
                Log.d(TAG,"isPinpadError == false");

                if (IsPinInput == 0) {
                    Log.d(TAG,"isPinInput = "+IsPinInput);
                    if (isOnlinePin) msg = "Request online PIN: Cancel";
                    else msg = "Request offline PIN: Cancel";
//                    My14abortEMV();
                } else {
                    Log.d(TAG,"isPinInput = "+IsPinInput);
                    if (isOnlinePin) {
                        msg = "Request online PIN: " + IsPinInput;

                    }
                    else msg = "Request offline PIN: " + IsPinInput + "Retry count：" + retryTimes;
                }
            }

            ArrayList<String> emvData = importData.getStringArrayList("emvDataList");
            if (emvData!=null && !emvData.isEmpty()){
                My19setEMVData(emvData);
            }

            //Q14004案例，属于密码时取消EMV
            if (importData.getBoolean("cancelEmvWhenInputPin")) {
                Q14005();
            }

            msg = result;
//            logUtils.addCaseLog(msg);
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);


            if (importData.getBoolean("isForceOnlineWhenInputPin")) {
                My23emvProcessingRequestOnline();
            }

            //联机PIN直接导入，脱机PIN调用密码假盘
            if (!isOnlinePin) {
                Log.d(TAG,"脱机调用密码键盘");
                My08initPinInputView(importData);
            } else {
                Log.d(TAG,"联机直接导入");
                String importpin = importData.getString("importPIN");
                if (importpin == null) {
                    MImportPin(IsPinInput, null);
                }
                else {
                    MImportPin(IsPinInput, importpin.getBytes());
                }
            }
        }

        @Override
        public void onConfirmCertInfo(String certType, String certInfo) throws RemoteException {
            Log.d(TAG, "onConfirmCertInfo callback, certType:" + certType + "certInfo:" + certInfo);

            msg = "Certification: Confirmation";
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);

            iEmv.importCertConfirmResult(1);
        }

        @Override
        public void onRequestOnlineProcess(Bundle aaResult) throws RemoteException {
            String result = "onRequestOnlineProcess callback SIGNATURE:" + aaResult.getBoolean("SIGNATURE") + "\nCTLS_CVMR:" + aaResult.getInt("CTLS_CVMR") + "\nRESULT:" + aaResult.getInt("RESULT") + "\nARQC_DATA:" + aaResult.getString("ARQC_DATA") + "\nREVERSAL_DATA:" + aaResult.getString("REVERSAL_DATA");

            Boolean getAppTLVListOption = importData.getBoolean("getAppTLVListOption");
            Boolean isGetCardData = importData.getBoolean("isGetCardData");
            Log.d(TAG,"isGetCardData = "+isGetCardData);
            if (getAppTLVListOption) {
                String[] strlist = {"9F26", "9F27", "9F10", "9F37", "9F1A", "9F36", "95", "9A", "9C", "9F02", "5F2A", "82", "9F03", "9F33", "9F34", "9F35", "84", "9F1E", "9F09", "9F41", "8E", "9F63"};
                My20getAppTLVList(strlist);
            }
            msg = "\nOnline request: " + "\n" + result;
            logUtils.addCaseLog("\nOnline request: " + "\n" + result);
//            Message message1 = new Message();
//            message1.getData().putString("message", msg);
//            handler.sendMessage(message1);
            /*Go online*/
            /*do online finish process, 2nd GAC*/
            MImportOnlineResult(importData, new MyOnlineResultHandler());
        }

        @Override
        public void onTransactionResult(int result, Bundle data) throws RemoteException {
            Log.i(TAG, "onTransactionResult callback, result:" + result + "\nTC_DATA:" + data.getString("TC_DATA") + "\nREVERSAL_DATA:" + data.getString("REVERSAL_DATA") + "\nERROR:" + data.getString("ERROR") + "\nSIGNATURE:" + data.getBoolean("SIGNATURE") + "\nCTLS_CVMR:" + data.getInt("CTLS_CVMR"));

            msg = "results:" + result + "\nTC_DATA:" + data.getString("TC_DATA") + "\nREVERSAL_DATA:" + data.getString("REVERSAL_DATA") + "\nERROR:" + data.getString("ERROR") + "\nSIGNATURE:" + data.getBoolean("SIGNATURE") + "\nCTLS_CVMR:" + data.getInt("CTLS_CVMR");
//            logUtils.addCaseLog(msg);
            Message message1 = new Message();
            message1.getData().putString("message", msg);
            handler.sendMessage(message1);
        }
    }

    public void MImportCardConfirmResult(boolean pass) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importCardConfirmResult(pass);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importCardConfirmResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("\nimportCardConfirmResult execute exception");
            e.printStackTrace();
        }
    }

    class MyOnlineResultHandler extends OnlineResultHandler.Stub {

        @Override
        public void onProccessResult(int result, Bundle data) throws RemoteException {
            logUtils.addCaseLog("\nOnProcessResult online post processing function");

            //判断是否联机成功，测试emv流程执行结果对于getEncryptData的影响
            if (result == 0){
                logUtils.addCaseLog("联机成功 result = "+result);
            }else {
                logUtils.addCaseLog("联机失败 result = "+result);
            }

            String str = "Online results callback, RESULT:" + result + "\nTC_DATA:" + data.getString("TC_DATA") + "\n" + "SCRIPT_DATA:" + data.getString("SCRIPT_DATA") + "\n" + "REVERSAL_DATA:" + data.getString("REVERSAL_DATA");
            Message message = new Message();
            message.getData().putString("message", str);
            handler.sendMessage(message);
//            logUtils.addCaseLog(str);
        }
    }

    public void MImportAmount(long amount) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importAmount(amount);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importAmount executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importAmount execute exception");
            e.printStackTrace();
        }
    }

    public void MImportAppSelect(int index) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importAppSelection(index);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importAppSelect executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importAppSelect execute exception");
            e.printStackTrace();
        }
    }


    public int MEmvProcessingRequestOnline() {
        try {
            long startTime = System.currentTimeMillis();
            int ret = iEmv.emvProcessingRequestOnline();
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("emvProcessingRequestOnline executeTime" + (endTime - startTime));
            logUtils.addCaseLog("emvProcessingRequestOnline execute:" + ret);
            return ret;
        } catch (Exception e) {
            logUtils.addCaseLog("emvProcessingRequestOnline execute exception");
            e.printStackTrace();
            return -1;
        }
    }

//    public void MAbortEMV() {
//        try {
//            long startTime = System.currentTimeMillis();
//            iEmv.abortEMV();
//            long endTime = System.currentTimeMillis();
//            logUtils.addCaseLog("abortEMV executeTime" + (endTime - startTime));
//        } catch (Exception e) {
//            logUtils.addCaseLog("abortEMV execute exception");
//            e.printStackTrace();
//        }
//    }

    public void MImportPin(int option, byte[] pin) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importPin(option, pin);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importPin executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            logUtils.addCaseLog("importPin execute exception");
            e.printStackTrace();
        }
    }

    public void MGetAppTLVList(String[] tagList) {
        try {
            long startTime = System.currentTimeMillis();
            String strs = iEmv.getAppTLVList(tagList);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("getAppTLVList executeTime" + (endTime - startTime));
            if (null != strs) {
                logUtils.addCaseLog("AppTLVList: " + strs);
            } else {
                logUtils.addCaseLog("Return length null");
            }
        } catch (Exception e) {
            logUtils.addCaseLog("getAppTLVList call exception");
            e.printStackTrace();
        }
    }

    public ArrayList<String> getApiList() {
        return apiList;
    }

    public ArrayList<ArrayList<String>> getCaseNames() {
        return caseNames;
    }

    public void runTheMethod(int groupPosition, int childPosition) {
        String name = caseNames.get(groupPosition).get(childPosition);
        logUtils.clearLog();
        try {
            Class aClass = Class.forName("moudles.SdeMoudle");
            Method method = aClass.getMethod(name);
            method.invoke(this);
            logUtils.addCaseLog(name + "Case execute completed");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void MImportOnlineResult(Bundle onlineResult, OnlineResultHandler handler) {
        try {
            long startTime = System.currentTimeMillis();
            iEmv.importOnlineResult(onlineResult, handler);
            long endTime = System.currentTimeMillis();
            logUtils.addCaseLog("importOnlineResult executeTime" + (endTime - startTime));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    public void showTheCaseInfo(int groupPosition, int childPosition) {
        String name = caseNames.get(groupPosition).get(childPosition);
        logUtils.printCaseInfo(name);
    }

    private void printMsgTool(String msg){
        ((MyApplication) context).serviceMoudle.getPintBtMoudle().printMsg(msg);
        try{
            Thread.sleep(1000);
        } catch (Exception e){
            e.printStackTrace();
        }
    }
}

